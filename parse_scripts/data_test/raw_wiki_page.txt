<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Trie - Wikipedia</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":!1,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"241fefa0-09ae-4122-80a0-5bdb33795866","wgCSPNonce":!1,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":!1,"wgNamespaceNumber":0,"wgPageName":"Trie","wgTitle":"Trie","wgCurRevisionId":1038125595,"wgRevisionId":1038125595,"wgArticleId":31274,"wgIsArticle":!0,"wgIsRedirect":!1,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Articles with short description","Short description is different from Wikidata","All articles with unsourced statements","Articles with unsourced statements from June 2017","Articles needing additional references from February 2015","All articles needing additional references","Commons category link from Wikidata",
"Articles with example Python (programming language) code","Trees (data structures)","Finite automata"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Trie","wgRelevantArticleId":31274,"wgIsProbablyEditable":!0,"wgRelevantPageIsProbablyEditable":!0,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgFlaggedRevsParams":{"tags":{"status":{"levels":-1}}},"wgMediaViewerOnClick":!0,"wgMediaViewerEnabledByDefault":!0,"wgPopupsFlags":10,"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgMFDisplayWikibaseDescriptions":{"search":!0,"nearby":!0,"watchlist":!0,"tagline":!1},"wgWMESchemaEditAttemptStepOversample":!1,"wgULSCurrentAutonym":"English","wgNoticeProject":"wikipedia","wgEditSubmitButtonLabelPublish":!0,"wgULSPosition":"interlanguage","wgULSisCompactLinksEnabled":!0,"wgGENewcomerTasksGuidanceEnabled":!0,"wgGEAskQuestionEnabled":!1,"wgGELinkRecommendationsFrontendEnabled":!1,
"wgCentralAuthMobileDomain":!1,"wgWikibaseItemId":"Q387015"};RLSTATE={"ext.globalCssJs.user.styles":"ready","site.styles":"ready","noscript":"ready","user.styles":"ready","ext.globalCssJs.user":"ready","user":"ready","user.options":"loading","ext.cite.styles":"ready","ext.pygments":"ready","skins.vector.styles.legacy":"ready","jquery.makeCollapsible.styles":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.uls.interlanguage":"ready","ext.wikimediaBadges":"ready","wikibase.client.init":"ready"};RLPAGEMODULES=["ext.cite.ux-enhancements","site","mediawiki.page.ready","jquery.makeCollapsible","mediawiki.toc","skins.vector.legacy.js","ext.gadget.ReferenceTooltips","ext.gadget.charinsert","ext.gadget.extra-toolbar-buttons","ext.gadget.refToolbar","ext.gadget.switcher","mmv.head","mmv.bootstrap.autostart","ext.popups","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.eventLogging","ext.wikimediaEvents","ext.navigationTiming",
"ext.uls.compactlinks","ext.uls.interface","ext.cx.eventlogging.campaigns","ext.centralNotice.geoIP","ext.centralNotice.startUp","ext.centralauth.centralautologin","ext.growthExperiments.SuggestedEditSession"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@1hzgi",function($,jQuery,require,module){/*@nomin*/mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});
});});</script>
<link rel="stylesheet" href="/w/load.php?lang=en&amp;modules=ext.cite.styles%7Cext.pygments%2CwikimediaBadges%7Cext.uls.interlanguage%7Cext.visualEditor.desktopArticleTarget.noscript%7Cjquery.makeCollapsible.styles%7Cskins.vector.styles.legacy%7Cwikibase.client.init&amp;only=styles&amp;skin=vector"/>
<script async="" src="/w/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="/w/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.38.0-wmf.1"/>
<meta name="referrer" content="origin"/>
<meta name="referrer" content="origin-when-crossorigin"/>
<meta name="referrer" content="origin-when-cross-origin"/>
<meta name="format-detection" content="telephone=no"/>
<meta property="og:image" content="https://upload.wikimedia.org/wikipedia/commons/thumb/b/be/Trie_example.svg/1200px-Trie_example.svg.png"/>
<meta property="og:title" content="Trie - Wikipedia"/>
<meta property="og:type" content="website"/>
<link rel="preconnect" href="//upload.wikimedia.org"/>
<link rel="alternate" media="only screen and (max-width: 720px)" href="//en.m.wikipedia.org/wiki/Trie"/>
<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Trie&amp;action=edit"/>
<link rel="edit" title="Edit this page" href="/w/index.php?title=Trie&amp;action=edit"/>
<link rel="apple-touch-icon" href="/static/apple-touch/wikipedia.png"/>
<link rel="shortcut icon" href="/static/favicon/wikipedia.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="//en.wikipedia.org/w/api.php?action=rsd"/>
<link rel="license" href="//creativecommons.org/licenses/by-sa/3.0/"/>
<link rel="canonical" href="https://en.wikipedia.org/wiki/Trie"/>
<link rel="dns-prefetch" href="//meta.wikimedia.org" />
<link rel="dns-prefetch" href="//login.wikimedia.org"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject mw-editable page-Trie rootpage-Trie skin-vector action-view skin-vector-legacy"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"><!-- CentralNotice --></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading" >Trie</h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From Wikipedia, the free encyclopedia</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><style data-mw-deduplicate="TemplateStyles:r1033289096">.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}</style><div role="note" class="hatnote navigation-not-searchable">This article is about a tree data structure. For the French commune, see <a href="/wiki/Trie-sur-Ba%C3%AFse" title="Trie-sur-Baïse">Trie-sur-Baïse</a>.</div>
<div class="shortdescription nomobile noexcerpt noprint searchaux" style="display:none">Type of search tree data structure</div>
<div class="thumb tright"><div class="thumbinner" style="width:252px;"><a href="/wiki/File:Trie_example.svg" class="image"><img alt="Depiction of a trie. Single empty circle, representing the root node, points to three children. The arrow to each child is marked by a different letter. The children themselves have similar set of arrows and child nodes, with nodes that correspond to full words bearing blue integer values." src="//upload.wikimedia.org/wikipedia/commons/thumb/b/be/Trie_example.svg/250px-Trie_example.svg.png" decoding="async" width="250" height="234" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/b/be/Trie_example.svg/375px-Trie_example.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/b/be/Trie_example.svg/500px-Trie_example.svg.png 2x" data-file-width="400" data-file-height="375" /></a>  <div class="thumbcaption"><div class="magnify"><a href="/wiki/File:Trie_example.svg" class="internal" title="Enlarge"></a></div>A trie for keys "A", "to", "tea", "ted", "ten", "i", "in", and "inn". Each complete English word has an arbitrary integer value associated with it.</div></div></div>
<p>In <a href="/wiki/Computer_science" title="Computer science">computer science</a>, a <b>trie</b>, also called <b>digital tree</b> or <b>prefix tree</b>, is a type of <a href="/wiki/Search_tree" title="Search tree">search tree</a>, a <a href="/wiki/Tree_(data_structure)" title="Tree (data structure)">tree</a> <a href="/wiki/Data_structure" title="Data structure">data structure</a> used for locating specific keys from within a set. These keys are most often <a href="/wiki/String_(computer_science)" title="String (computer science)">strings</a>, with links between nodes defined not by the entire key, but by individual <a href="/wiki/Character_(computing)" title="Character (computing)">characters</a>. In order to access a key (to recover its value, change it, or remove it), the trie is traversed <a href="/wiki/Depth-first_search" title="Depth-first search">depth-first</a>, following the links between nodes, which represent each character in the key.
</p><p>Unlike a <a href="/wiki/Binary_search_tree" title="Binary search tree">binary search tree</a>, nodes in the trie do not store their associated key. Instead, a node's position in the trie defines the key with which it is associated. This distributes the value of each key across the data structure, and means that not every node necessarily has an associated value.
</p><p>All the children of a node have a common <a href="/wiki/Prefix" title="Prefix">prefix</a> of the string associated with that parent node, and the root is associated with the <a href="/wiki/Empty_string" title="Empty string">empty string</a>. This task of storing data accessible by its prefix can be accomplished in a memory-optimized way by employing a <a href="/wiki/Radix_tree" title="Radix tree">radix tree</a>.
</p><p>Though tries can be keyed by character strings, they need not be. The same algorithms can be adapted for ordered lists of any underlying type, e.g. <a href="/wiki/Permutation" title="Permutation">permutations</a> of digits or shapes. In particular, a <b>bitwise trie</b> is keyed on the individual bits making up a piece of fixed-length binary data, such as an integer or <a href="/wiki/Memory_address" title="Memory address">memory address</a>.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#History,_etymology,_and_pronunciation"><span class="tocnumber">1</span> <span class="toctext">History, etymology, and pronunciation</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Applications"><span class="tocnumber">2</span> <span class="toctext">Applications</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="#Dictionary_representation"><span class="tocnumber">2.1</span> <span class="toctext">Dictionary representation</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-4"><a href="#Replacing_other_data_structures"><span class="tocnumber">3</span> <span class="toctext">Replacing other data structures</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="#Replacement_for_hash_tables"><span class="tocnumber">3.1</span> <span class="toctext">Replacement for hash tables</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="#DFSA_representation"><span class="tocnumber">3.2</span> <span class="toctext">DFSA representation</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-7"><a href="#Algorithms"><span class="tocnumber">4</span> <span class="toctext">Algorithms</span></a>
<ul>
<li class="toclevel-2 tocsection-8"><a href="#Autocomplete"><span class="tocnumber">4.1</span> <span class="toctext">Autocomplete</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="#Sorting"><span class="tocnumber">4.2</span> <span class="toctext">Sorting</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="#Full-text_search"><span class="tocnumber">4.3</span> <span class="toctext">Full-text search</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-11"><a href="#Implementation_strategies"><span class="tocnumber">5</span> <span class="toctext">Implementation strategies</span></a>
<ul>
<li class="toclevel-2 tocsection-12"><a href="#Bitwise_tries"><span class="tocnumber">5.1</span> <span class="toctext">Bitwise tries</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="#Compressing_tries"><span class="tocnumber">5.2</span> <span class="toctext">Compressing tries</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="#External_memory_tries"><span class="tocnumber">5.3</span> <span class="toctext">External memory tries</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-15"><a href="#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1 tocsection-16"><a href="#References"><span class="tocnumber">7</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-17"><a href="#External_links"><span class="tocnumber">8</span> <span class="toctext">External links</span></a></li>
</ul>
</div>

<h2><span id="History.2C_etymology.2C_and_pronunciation"></span><span class="mw-headline" id="History,_etymology,_and_pronunciation">History, etymology, and pronunciation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Trie&amp;action=edit&amp;section=1" title="Edit section: History, etymology, and pronunciation">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The idea of a trie for representing a set of strings was first abstractly described by <a href="/wiki/Axel_Thue" title="Axel Thue">Axel Thue</a> in 1912.<sup id="cite_ref-thue_1-0" class="reference"><a href="#cite_note-thue-1">&#91;1&#93;</a></sup><sup id="cite_ref-KnuthVol3_2-0" class="reference"><a href="#cite_note-KnuthVol3-2">&#91;2&#93;</a></sup> Tries were first described in a computer context by René de la Briandais in 1959.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3">&#91;3&#93;</a></sup><sup id="cite_ref-brass_4-0" class="reference"><a href="#cite_note-brass-4">&#91;4&#93;</a></sup><sup id="cite_ref-KnuthVol3_2-1" class="reference"><a href="#cite_note-KnuthVol3-2">&#91;2&#93;</a></sup> The idea was independently described in 1960 by <a href="/wiki/Edward_Fredkin" title="Edward Fredkin">Edward Fredkin</a>,<sup id="cite_ref-triememory_5-0" class="reference"><a href="#cite_note-triememory-5">&#91;5&#93;</a></sup> who coined the term <i>trie</i>, pronouncing it <span class="rt-commentedText nowrap"><span class="IPA nopopups noexcerpt"><a href="/wiki/Help:IPA/English" title="Help:IPA/English">/<span style="border-bottom:1px dotted"><span title="/ˈ/: primary stress follows">ˈ</span><span title="&#39;t&#39; in &#39;tie&#39;">t</span><span title="&#39;r&#39; in &#39;rye&#39;">r</span><span title="/iː/: &#39;ee&#39; in &#39;fleece&#39;">iː</span></span>/</a></span></span> (as "tree"), after the middle syllable of <i>retrieval</i>.<sup id="cite_ref-DADS_6-0" class="reference"><a href="#cite_note-DADS-6">&#91;6&#93;</a></sup><sup id="cite_ref-Liang1983_7-0" class="reference"><a href="#cite_note-Liang1983-7">&#91;7&#93;</a></sup> However, other authors pronounce it <span class="rt-commentedText nowrap"><span class="IPA nopopups noexcerpt"><a href="/wiki/Help:IPA/English" title="Help:IPA/English">/<span style="border-bottom:1px dotted"><span title="/ˈ/: primary stress follows">ˈ</span><span title="&#39;t&#39; in &#39;tie&#39;">t</span><span title="&#39;r&#39; in &#39;rye&#39;">r</span><span title="/aɪ/: &#39;i&#39; in &#39;tide&#39;">aɪ</span></span>/</a></span></span> (as "try"), in an attempt to distinguish it verbally from "tree".<sup id="cite_ref-DADS_6-1" class="reference"><a href="#cite_note-DADS-6">&#91;6&#93;</a></sup><sup id="cite_ref-Liang1983_7-1" class="reference"><a href="#cite_note-Liang1983-7">&#91;7&#93;</a></sup><sup id="cite_ref-KnuthVol3_2-2" class="reference"><a href="#cite_note-KnuthVol3-2">&#91;2&#93;</a></sup>
</p>
<h2><span class="mw-headline" id="Applications">Applications</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Trie&amp;action=edit&amp;section=2" title="Edit section: Applications">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span class="mw-headline" id="Dictionary_representation">Dictionary representation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Trie&amp;action=edit&amp;section=3" title="Edit section: Dictionary representation">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Common applications of tries include storing a <a href="/wiki/Predictive_text" title="Predictive text">predictive text</a> or <a href="/wiki/Autocomplete" title="Autocomplete">autocomplete</a> dictionary and implementing approximate matching algorithms,<sup id="cite_ref-8" class="reference"><a href="#cite_note-8">&#91;8&#93;</a></sup> such as those used in <a href="/wiki/Spell_checking" class="mw-redirect" title="Spell checking">spell checking</a> and <a href="/wiki/Hyphenation_algorithm" class="mw-redirect" title="Hyphenation algorithm">hyphenation</a><sup id="cite_ref-Liang1983_7-2" class="reference"><a href="#cite_note-Liang1983-7">&#91;7&#93;</a></sup> software. Such applications take advantage of a trie's ability to quickly search for, insert, and delete entries. However, if storing dictionary words is all that is required (i.e. there is no need to store metadata associated with each word), a minimal <a href="/wiki/Deterministic_acyclic_finite_state_automaton" title="Deterministic acyclic finite state automaton">deterministic acyclic finite state automaton</a> (DAFSA) or <a href="/wiki/Radix_tree" title="Radix tree">radix tree</a> would use less storage space than a trie. This is because DAFSAs and radix trees can compress identical branches from the trie which correspond to the same suffixes (or parts) of different words being stored.
</p>
<h2><span class="mw-headline" id="Replacing_other_data_structures">Replacing other data structures</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Trie&amp;action=edit&amp;section=4" title="Edit section: Replacing other data structures">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span class="mw-headline" id="Replacement_for_hash_tables">Replacement for hash tables</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Trie&amp;action=edit&amp;section=5" title="Edit section: Replacement for hash tables">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>A trie can be used to replace a <a href="/wiki/Hash_table" title="Hash table">hash table</a>, over which it has the following advantages:
</p>
<ul><li>Looking up data in a trie is faster in the worst case, O(m) time (where m is the length of a search string), compared to an imperfect hash table. The worst-case lookup speed in an imperfect hash table is <a href="/wiki/Hash_table#Chaining" title="Hash table">O(N)</a> time, but far more typically is O(1), with O(m) time spent evaluating the hash.</li>
<li>There are no <a href="/wiki/Hash_collision" title="Hash collision">collisions</a> of different keys in a trie. (An imperfect hash table can have key collisions. A key collision is the hash function mapping of different keys to the same position in a hash table.)</li>
<li>Buckets in a trie, which are analogous to hash table buckets that store key collisions, are necessary only if a single key is associated with more than one value.</li>
<li>There is no need to provide a hash function or to change hash functions as more keys are added to a trie.</li>
<li>A trie can provide an alphabetical ordering of the entries by key.</li></ul>
<p>However, a trie also has some drawbacks compared to a hash table:
</p>
<ul><li>Trie lookup can be slower than hash table lookup, especially if the data is directly accessed on a hard disk drive or some other secondary storage device where the random-access time is high compared to main memory.<sup id="cite_ref-triememory_5-1" class="reference"><a href="#cite_note-triememory-5">&#91;5&#93;</a></sup></li>
<li>Some keys, such as floating point numbers, can lead to long chains and prefixes that are not particularly meaningful. Nevertheless, a bitwise trie can handle standard IEEE single and double format floating point numbers.<sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">&#91;<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (June 2017)">citation needed</span></a></i>&#93;</sup></li>
<li>Some tries can require more space than a hash table, as memory may be allocated for each character in the search string, rather than a single chunk of memory for the whole entry, as in most hash tables.</li></ul>
<h3><span class="mw-headline" id="DFSA_representation">DFSA representation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Trie&amp;action=edit&amp;section=6" title="Edit section: DFSA representation">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>A trie can be seen as a tree-shaped <a href="/wiki/Deterministic_finite_automaton" title="Deterministic finite automaton">deterministic finite automaton</a>. Each <a href="/wiki/Finite_language" class="mw-redirect" title="Finite language">finite language</a> is generated by a trie automaton, and each trie can be compressed into a <a href="/wiki/Deterministic_acyclic_finite_state_automaton" title="Deterministic acyclic finite state automaton">deterministic acyclic finite state automaton</a>.
</p>
<h2><span class="mw-headline" id="Algorithms">Algorithms</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Trie&amp;action=edit&amp;section=7" title="Edit section: Algorithms">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The trie is a tree of nodes which supports Find and Insert operations. Find returns the value for a key string, and Insert inserts a string (the key) and a value into the trie. Both Insert and Find run in <span class="texhtml"><span class="texhtml">O(<i>m</i>)</span></span> time, where m is the length of the key.
</p><p>A simple Node class can be used to represent nodes in the trie:
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>
        <span class="c1"># Note that using a dictionary for children (as in this implementation)</span>
        <span class="c1"># would not by default lexicographically sort the children, which is</span>
        <span class="c1"># required by the lexicographic sorting in the Sorting section.</span>
        <span class="c1"># For lexicographic sorting, we can instead use an array of Nodes.</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">children</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Node</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>  <span class="c1"># mapping from character to Node</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">value</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="kc">None</span>
</pre></div>
<p>Note that <code>children</code> is a dictionary of characters to a node's children; and it is said that a "terminal" node is one which represents a complete string.<br />A trie's value can be looked up as follows:
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="n">node</span><span class="p">:</span> <span class="n">Node</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Any</span><span class="p">]:</span>
    <span class="sd">&quot;&quot;&quot;Find value by key in node.&quot;&quot;&quot;</span>
    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">key</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">:</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="n">char</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">None</span>
    <span class="k">return</span> <span class="n">node</span><span class="o">.</span><span class="n">value</span>
</pre></div>
<p>A slight modifications of this routine can be utilized
</p>
<ul><li>to check if there is any word in the trie that starts with a given prefix (see <a href="/wiki/Trie#Autocomplete" title="Trie">§ Autocomplete</a>), and</li>
<li>to return the deepest node corresponding to some prefix of a given string.</li></ul>
<p>Insertion proceeds by walking the trie according to the string to be inserted, then appending new nodes for the suffix of the string that is not contained in the trie:
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="n">node</span><span class="p">:</span> <span class="n">Node</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>
    <span class="sd">&quot;&quot;&quot;Insert key/value pair into node.&quot;&quot;&quot;</span>
    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">key</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">char</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">:</span>
            <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="n">char</span><span class="p">]</span> <span class="o">=</span> <span class="n">Node</span><span class="p">()</span>
        <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="n">char</span><span class="p">]</span>
    <span class="n">node</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span>
</pre></div><p>Deletion of a key can be done lazily (by clearing just the value within the node corresponding to a key), or eagerly by cleaning up any parent nodes that are no longer necessary. Eager deletion is described in the pseudocode here:<sup id="cite_ref-:0_9-0" class="reference"><a href="#cite_note-:0-9">&#91;9&#93;</a></sup>
</p><div class="mw-highlight mw-highlight-lang-python3 mw-content-ltr" dir="ltr"><pre><span></span><span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="n">root</span><span class="p">:</span> <span class="n">Node</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
    <span class="sd">&quot;&quot;&quot;Eagerly delete the key from the trie rooted at `root`.</span>
<span class="sd">    Return whether the trie rooted at `root` is now empty.</span>
<span class="sd">    &quot;&quot;&quot;</span>
    
    <span class="k">def</span> <span class="nf">_delete</span><span class="p">(</span><span class="n">node</span><span class="p">:</span> <span class="n">Node</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">d</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="sd">&quot;&quot;&quot;Clear the node corresponding to key[d], and delete the child key[d+1]</span>
<span class="sd">        if that subtrie is completely empty, and return whether `node` has been</span>
<span class="sd">        cleared.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="n">d</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">key</span><span class="p">):</span>
            <span class="n">node</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="kc">None</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">c</span> <span class="o">=</span> <span class="n">key</span><span class="p">[</span><span class="n">d</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span> <span class="ow">and</span> <span class="n">_delete</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="n">c</span><span class="p">],</span> <span class="n">key</span><span class="p">,</span> <span class="n">d</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                <span class="k">del</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="n">c</span><span class="p">]</span>
        <span class="c1"># Return whether the subtrie rooted at `node` is now completely empty</span>
        <span class="k">return</span> <span class="n">node</span><span class="o">.</span><span class="n">value</span> <span class="ow">is</span> <span class="kc">None</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>

    <span class="k">return</span> <span class="n">_delete</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</pre></div>
<h3><span class="mw-headline" id="Autocomplete">Autocomplete</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Trie&amp;action=edit&amp;section=8" title="Edit section: Autocomplete">edit</a><span class="mw-editsection-bracket">]</span></span></h3><p>
Tries can be used to return a list of keys with a given prefix. This can also be modified to allow for wildcards in the prefix search.<sup id="cite_ref-:0_9-1" class="reference"><a href="#cite_note-:0-9">&#91;9&#93;</a></sup></p><div class="mw-highlight mw-highlight-lang-python3 mw-content-ltr" dir="ltr"><pre><span></span><span class="k">def</span> <span class="nf">keys_with_prefix</span><span class="p">(</span><span class="n">root</span><span class="p">:</span> <span class="n">Node</span><span class="p">,</span> <span class="n">prefix</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="n">results</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">_get_node</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">prefix</span><span class="p">)</span>
    <span class="n">_collect</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="nb">list</span><span class="p">(</span><span class="n">prefix</span><span class="p">),</span> <span class="n">results</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">results</span>

<span class="k">def</span> <span class="nf">_collect</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Node</span><span class="p">],</span> <span class="n">prefix</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">results</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    Append keys under node `x` matching the given prefix to `results`.</span>
<span class="sd">    prefix: list of characters</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">if</span> <span class="n">x</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
        <span class="k">return</span>
    <span class="k">if</span> <span class="n">x</span><span class="o">.</span><span class="n">value</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
        <span class="n">prefix_str</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">prefix</span><span class="p">)</span>
        <span class="n">results</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">prefix_str</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">x</span><span class="o">.</span><span class="n">children</span><span class="p">:</span>
        <span class="n">prefix</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
        <span class="n">_collect</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="n">c</span><span class="p">],</span> <span class="n">prefix</span><span class="p">,</span> <span class="n">results</span><span class="p">)</span>
        <span class="k">del</span> <span class="n">prefix</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>  <span class="c1"># delete last character</span>
        
<span class="k">def</span> <span class="nf">_get_node</span><span class="p">(</span><span class="n">node</span><span class="p">:</span> <span class="n">Node</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Node</span><span class="p">]:</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    Find node by key. This is the same as the `find` function defined above,</span>
<span class="sd">    but returning the found node itself rather than the found node&#39;s value.</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">key</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">:</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="n">char</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">None</span>
    <span class="k">return</span> <span class="n">node</span>
</pre></div>
<h3><span class="mw-headline" id="Sorting">Sorting</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Trie&amp;action=edit&amp;section=9" title="Edit section: Sorting">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Lexicographic sorting of a set of keys can be accomplished by building a trie from them, with the children of each node sorted lexicographically, and traversing it in <a href="/wiki/Tree_traversal#Pre-order" title="Tree traversal">pre-order</a>, printing any values in either the interior nodes or in the leaf nodes.<sup id="cite_ref-10" class="reference"><a href="#cite_note-10">&#91;10&#93;</a></sup> This algorithm is a form of <a href="/wiki/Radix_sort" title="Radix sort">radix sort</a>.<sup id="cite_ref-11" class="reference"><a href="#cite_note-11">&#91;11&#93;</a></sup>
</p><p>A trie is the fundamental data structure of <a href="/wiki/Burstsort" title="Burstsort">Burstsort</a>, which (in 2007) was the fastest known string sorting algorithm due to its efficient <a href="/wiki/Cache_(computing)" title="Cache (computing)">cache</a> use.<sup id="cite_ref-cachestringsort_12-0" class="reference"><a href="#cite_note-cachestringsort-12">&#91;12&#93;</a></sup> Now there are faster ones.<sup id="cite_ref-stringradix_13-0" class="reference"><a href="#cite_note-stringradix-13">&#91;13&#93;</a></sup>
</p>
<h3><span class="mw-headline" id="Full-text_search">Full-text search</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Trie&amp;action=edit&amp;section=10" title="Edit section: Full-text search">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>A special kind of trie, called a <a href="/wiki/Suffix_tree" title="Suffix tree">suffix tree</a>, can be used to index all suffixes in a text in order to carry out fast full text searches.
</p>
<h2><span class="mw-headline" id="Implementation_strategies">Implementation strategies</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Trie&amp;action=edit&amp;section=11" title="Edit section: Implementation strategies">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="thumb tright"><div class="thumbinner" style="width:222px;"><a href="/wiki/File:Pointer_implementation_of_a_trie.svg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/5/5d/Pointer_implementation_of_a_trie.svg/220px-Pointer_implementation_of_a_trie.svg.png" decoding="async" width="220" height="232" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/5/5d/Pointer_implementation_of_a_trie.svg/330px-Pointer_implementation_of_a_trie.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/5/5d/Pointer_implementation_of_a_trie.svg/440px-Pointer_implementation_of_a_trie.svg.png 2x" data-file-width="393" data-file-height="415" /></a>  <div class="thumbcaption"><div class="magnify"><a href="/wiki/File:Pointer_implementation_of_a_trie.svg" class="internal" title="Enlarge"></a></div>A trie implemented as a <a href="/wiki/Left-child_right-sibling_binary_tree" title="Left-child right-sibling binary tree">left-child right-sibling binary tree</a>: vertical arrows are <style data-mw-deduplicate="TemplateStyles:r886049734">.mw-parser-output .monospaced{font-family:monospace,monospace}</style><span class="monospaced">child</span> pointers, dashed horizontal arrows are <link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r886049734"/><span class="monospaced">next</span> pointers. The set of strings stored in this trie is <link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r886049734"/><span class="monospaced">{baby, bad, bank, box, dad, dance</span>}. The lists are sorted to allow traversal in lexicographic order.</div></div></div>
<p>There are several ways to represent tries, corresponding to different trade-offs between memory use and speed of the operations. The basic form is that of a linked set of nodes, where each node contains an array of child pointers, one for each symbol in the <a href="/wiki/Alphabet_(computer_science)" class="mw-redirect" title="Alphabet (computer science)">alphabet</a> (so for the <a href="/wiki/English_alphabet" title="English alphabet">English alphabet</a>, one would store 26 child pointers and for the alphabet of bytes, 256 pointers). This is simple but wasteful in terms of memory: using the alphabet of bytes (size 256) and four-byte pointers, each node requires a kilobyte of storage, and when there is little overlap in the strings' prefixes, the number of required nodes is roughly the combined length of the stored strings.<sup id="cite_ref-brass_4-1" class="reference"><a href="#cite_note-brass-4">&#91;4&#93;</a></sup><sup class="reference nowrap"><span title="Page / location: 341">&#58;&#8202;341&#8202;</span></sup> Put another way, the nodes near the bottom of the tree tend to have few children and there are many of them, so the structure wastes space storing null pointers.<sup id="cite_ref-allison_14-0" class="reference"><a href="#cite_note-allison-14">&#91;14&#93;</a></sup>
</p><p>The storage problem can be alleviated by an implementation technique called <i>alphabet reduction</i>, whereby the original strings are reinterpreted as longer strings over a smaller alphabet. E.g., a string of <span class="texhtml mvar" style="font-style:italic;">n</span> bytes can alternatively be regarded as a string of <span class="texhtml">2<i>n</i></span> <a href="/wiki/Nibble" title="Nibble">four-bit units</a> and stored in a trie with sixteen pointers per node. Lookups need to visit twice as many nodes in the worst case, but the storage requirements go down by a factor of eight.<sup id="cite_ref-brass_4-2" class="reference"><a href="#cite_note-brass-4">&#91;4&#93;</a></sup><sup class="reference nowrap"><span title="Page / location: 347–352">&#58;&#8202;347–352&#8202;</span></sup>
</p><p>An alternative implementation represents a node as a triple <link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r886049734"/><span class="monospaced">(symbol, child, next)</span> and links the children of a node together as a <a href="/wiki/Singly_linked_list" class="mw-redirect" title="Singly linked list">singly linked list</a>: <link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r886049734"/><span class="monospaced">child</span> points to the node's first child, <link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r886049734"/><span class="monospaced">next</span> to the parent node's next child.<sup id="cite_ref-allison_14-1" class="reference"><a href="#cite_note-allison-14">&#91;14&#93;</a></sup><sup id="cite_ref-15" class="reference"><a href="#cite_note-15">&#91;15&#93;</a></sup> The set of children can also be represented as a <a href="/wiki/Binary_search_tree" title="Binary search tree">binary search tree</a>; one instance of this idea is the <a href="/wiki/Ternary_search_tree" title="Ternary search tree">ternary search tree</a> developed by <a href="/wiki/Jon_Bentley_(computer_scientist)" title="Jon Bentley (computer scientist)">Bentley</a> and <a href="/wiki/Robert_Sedgewick_(computer_scientist)" title="Robert Sedgewick (computer scientist)">Sedgewick</a>.<sup id="cite_ref-brass_4-3" class="reference"><a href="#cite_note-brass-4">&#91;4&#93;</a></sup><sup class="reference nowrap"><span title="Page / location: 353">&#58;&#8202;353&#8202;</span></sup>
</p><p>Another alternative in order to avoid the use of an array of 256 pointers (ASCII), as suggested before,  is to store the alphabet array as a bitmap of 256 bits representing the ASCII alphabet, reducing dramatically the size of the nodes.<sup id="cite_ref-16" class="reference"><a href="#cite_note-16">&#91;16&#93;</a></sup>
</p>
<h3><span class="mw-headline" id="Bitwise_tries">Bitwise tries</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Trie&amp;action=edit&amp;section=12" title="Edit section: Bitwise tries">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<table class="box-Unreferenced_section plainlinks metadata ambox ambox-content ambox-Unreferenced" role="presentation"><tbody><tr><td class="mbox-image"><div style="width:52px"><a href="/wiki/File:Question_book-new.svg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" decoding="async" width="50" height="39" srcset="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/75px-Question_book-new.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/100px-Question_book-new.svg.png 2x" data-file-width="512" data-file-height="399" /></a></div></td><td class="mbox-text"><div class="mbox-text-span">This section <b>does not <a href="/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">cite</a> any <a href="/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">sources</a></b>.<span class="hide-when-compact"> Please help <a class="external text" href="https://en.wikipedia.org/w/index.php?title=Trie&amp;action=edit">improve this section</a> by <a href="/wiki/Help:Referencing_for_beginners" title="Help:Referencing for beginners">adding citations to reliable sources</a>. Unsourced material may be challenged and <a href="/wiki/Wikipedia:Verifiability#Burden_of_evidence" title="Wikipedia:Verifiability">removed</a>.</span>  <span class="date-container"><i>(<span class="date">February 2015</span>)</i></span><span class="hide-when-compact"><i> (<a href="/wiki/Help:Maintenance_template_removal" title="Help:Maintenance template removal">Learn how and when to remove this template message</a>)</i></span></div></td></tr></tbody></table>
<p>Bitwise tries are much the same as a normal character-based trie except that individual bits are used to traverse what effectively becomes a form of binary tree. Generally, implementations use a special CPU instruction to very quickly <a href="/wiki/Find_first_set" title="Find first set">find the first set bit</a> in a fixed length key (e.g., GCC's <code>__builtin_clz()</code> intrinsic). This value is then used to index a 32- or 64-entry table which points to the first item in the bitwise trie with that number of leading zero bits. The search then proceeds by testing each subsequent bit in the key and choosing <code>child[0]</code> or <code>child[1]</code> appropriately until the item is found.
</p><p>Although this process might sound slow, it is very cache-local and highly parallelizable due to the lack of register dependencies and therefore in fact has excellent performance on modern <a href="/wiki/Out-of-order_execution" title="Out-of-order execution">out-of-order execution</a> CPUs. A <a href="/wiki/Red%E2%80%93black_tree" title="Red–black tree">red–black tree</a> for example performs much better on paper, but is highly cache-unfriendly and causes multiple pipeline and <a href="/wiki/Translation_lookaside_buffer" title="Translation lookaside buffer">TLB</a> stalls on modern CPUs which makes that algorithm bound by <a href="/wiki/Memory_latency" title="Memory latency">memory latency</a> rather than CPU speed. In comparison, a bitwise trie rarely accesses memory, and when it does, it does so only to read, thus avoiding SMP cache coherency overhead. Hence, it is increasingly becoming the algorithm of choice for code that performs many rapid insertions and deletions, such as memory allocators (e.g., recent versions of the famous <a href="/wiki/Malloc#dlmalloc" class="mw-redirect" title="Malloc">Doug Lea's allocator (dlmalloc) and its descendants</a>). The worst case of steps for lookup is the same as bits used to index bins in the tree.<sup id="cite_ref-dlmalloc_17-0" class="reference"><a href="#cite_note-dlmalloc-17">&#91;17&#93;</a></sup>
</p><p>Alternatively, the term "bitwise trie" can more generally refer to a binary tree structure holding integer values, sorting them by their binary prefix. An example is the <a href="/wiki/X-fast_trie" title="X-fast trie">x-fast trie</a>.
</p>
<h3><span class="mw-headline" id="Compressing_tries">Compressing tries</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Trie&amp;action=edit&amp;section=13" title="Edit section: Compressing tries">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Compressing the trie and merging the common branches can sometimes yield large performance gains. This works best under the following conditions:
</p>
<ul><li>The trie is (mostly) static, so that no key insertions to or deletions are required (e.g., after bulk creation of the trie).</li>
<li>Only lookups are needed.</li>
<li>The trie nodes are not keyed by node-specific data, or the nodes' data are common.<sup id="cite_ref-18" class="reference"><a href="#cite_note-18">&#91;18&#93;</a></sup></li>
<li>The total set of stored keys is very sparse within their representation space (so compression pays off).</li></ul>
<p>For example, it may be used to represent sparse <a href="/wiki/Bitset" class="mw-redirect" title="Bitset">bitsets</a>; i.e., subsets of a much larger, fixed enumerable set. In such a case, the trie is keyed by the bit element position within the full set. The key is created from the string of bits needed to encode the integral position of each element. Such tries have a very degenerate form with many missing branches. After detecting the repetition of common patterns or filling the unused gaps, the unique leaf nodes (bit strings) can be stored and compressed easily, reducing the overall size of the trie.
</p><p>Such compression is also used in the implementation of the various fast lookup tables for retrieving <a href="/wiki/Unicode" title="Unicode">Unicode</a> character properties. These could include case-mapping tables (e.g., for the <a href="/wiki/Greek_language" title="Greek language">Greek</a> letter <a href="/wiki/Pi_(letter)" title="Pi (letter)">pi</a>, from Π to π), or lookup tables normalizing the combination of base and combining characters (like the a-<a href="/wiki/Umlaut_(diacritic)" class="mw-redirect" title="Umlaut (diacritic)">umlaut</a> in <a href="/wiki/German_language" title="German language">German</a>, ä, or the <a href="/wiki/Dalet#Hebrew_Dalet" title="Dalet">dalet</a>-<a href="/wiki/Patah" class="mw-redirect" title="Patah">patah</a>-<a href="/wiki/Dagesh" title="Dagesh">dagesh</a>-<a href="/wiki/Ole_(cantillation)" title="Ole (cantillation)">ole</a> in <a href="/wiki/Biblical_Hebrew" title="Biblical Hebrew">Biblical Hebrew</a>, <style data-mw-deduplicate="TemplateStyles:r1020748213">.mw-parser-output .script-hebrew,.mw-parser-output .script-Hebr{font-family:"SBL Hebrew","SBL BibLit","Taamey Ashkenaz","Taamey Frank CLM","Frank Ruehl CLM","Ezra SIL","Ezra SIL SR","Keter Aram Tsova","Taamey David CLM","Keter YG","Shofar","David CLM","Hadasim CLM","Simple CLM","Nachlieli",Cardo,Alef,"Noto Serif Hebrew","Noto Sans Hebrew","David Libre",David,"Times New Roman",Gisha,Arial,FreeSerif,FreeSans}</style><span class="script-hebrew" style="font-size: 115%;" dir="rtl">דַּ֫</span>&#8206;). For such applications, the representation is similar to transforming a very large, unidimensional, sparse table (e.g., Unicode code points) into a multidimensional matrix of their combinations, and then using the coordinates in the hyper-matrix as the string key of an uncompressed trie to represent the resulting character. The compression will then consist of detecting and merging the common columns within the hyper-matrix to compress the last dimension in the key. For example, to avoid storing the full, multibyte Unicode code point of each element forming a matrix column, the groupings of similar code points can be exploited. Each dimension of the hyper-matrix stores the start position of the next dimension, so that only the offset (typically a single byte) need be stored. The resulting vector is itself compressible when it is also sparse, so each dimension (associated to a layer level in the trie) can be compressed separately.
</p><p>Some implementations do support such data compression within dynamic sparse tries and allow insertions and deletions in compressed tries. However, this usually has a significant cost when compressed segments need to be split or merged. Some tradeoff has to be made between data compression and update speed. A typical strategy is to limit the range of global lookups for comparing the common branches in the sparse trie.<sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">&#91;<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (June 2017)">citation needed</span></a></i>&#93;</sup>
</p><p>The result of such compression may look similar to trying to transform the trie into a <a href="/wiki/Directed_acyclic_graph" title="Directed acyclic graph">directed acyclic graph</a> (DAG), because the reverse transform from a DAG to a trie is obvious and always possible. However, the shape of the DAG is determined by the form of the key chosen to index the nodes, in turn constraining the compression possible.
</p><p>Another compression strategy is to "unravel" the data structure into a single byte array.<sup id="cite_ref-19" class="reference"><a href="#cite_note-19">&#91;19&#93;</a></sup>
This approach eliminates the need for node pointers, substantially reducing the memory requirements. This in turn permits memory mapping and the use of virtual memory to efficiently load the data from disk.
</p><p>One more approach is to "pack" the trie.<sup id="cite_ref-Liang1983_7-3" class="reference"><a href="#cite_note-Liang1983-7">&#91;7&#93;</a></sup> Liang describes a space-efficient implementation of a sparse packed trie applied to automatic <a href="/wiki/Hyphenation_algorithm" class="mw-redirect" title="Hyphenation algorithm">hyphenation</a>, in which the descendants of each node may be interleaved in memory.
</p>
<h3><span class="mw-headline" id="External_memory_tries">External memory tries</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Trie&amp;action=edit&amp;section=14" title="Edit section: External memory tries">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Several trie variants are suitable for maintaining sets of strings in <a href="/wiki/Auxiliary_memory" class="mw-redirect" title="Auxiliary memory">external memory</a>, including suffix trees. A combination of trie and <a href="/wiki/B-tree" title="B-tree">B-tree</a>,  called the <i>B-trie</i> has also been suggested for this task; compared to suffix trees, they are limited in the supported operations but also more compact, while performing update operations faster.<sup id="cite_ref-20" class="reference"><a href="#cite_note-20">&#91;20&#93;</a></sup>
</p>
<h2><span class="mw-headline" id="See_also">See also</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Trie&amp;action=edit&amp;section=15" title="Edit section: See also">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<style data-mw-deduplicate="TemplateStyles:r998391716">.mw-parser-output .div-col{margin-top:0.3em;column-width:30em}.mw-parser-output .div-col-small{font-size:90%}.mw-parser-output .div-col-rules{column-rule:1px solid #aaa}.mw-parser-output .div-col dl,.mw-parser-output .div-col ol,.mw-parser-output .div-col ul{margin-top:0}.mw-parser-output .div-col li,.mw-parser-output .div-col dd{page-break-inside:avoid;break-inside:avoid-column}</style><div class="div-col" style="column-width: 22em;">
<ul><li><a href="/wiki/Suffix_tree" title="Suffix tree">Suffix tree</a></li>
<li><a href="/wiki/Radix_tree" title="Radix tree">Radix tree</a></li>
<li><a href="/wiki/Deterministic_acyclic_finite_state_automaton" title="Deterministic acyclic finite state automaton">Directed acyclic word graph</a> (aka DAWG)</li>
<li><a href="/wiki/Acyclic_deterministic_finite_automata" class="mw-redirect" title="Acyclic deterministic finite automata">Acyclic deterministic finite automata</a></li>
<li><a href="/wiki/Hash_trie" title="Hash trie">Hash trie</a></li>
<li><a href="/wiki/Deterministic_finite_automata" class="mw-redirect" title="Deterministic finite automata">Deterministic finite automata</a></li>
<li><a href="/wiki/Judy_array" title="Judy array">Judy array</a></li>
<li><a href="/wiki/Search_algorithm" title="Search algorithm">Search algorithm</a></li>
<li><a href="/wiki/Extendible_hashing" title="Extendible hashing">Extendible hashing</a></li>
<li><a href="/wiki/Hash_array_mapped_trie" title="Hash array mapped trie">Hash array mapped trie</a></li>
<li><a href="/wiki/Prefix_hash_tree" title="Prefix hash tree">Prefix hash tree</a></li>
<li><a href="/wiki/Burstsort" title="Burstsort">Burstsort</a></li>
<li><a href="/wiki/Lule%C3%A5_algorithm" title="Luleå algorithm">Luleå algorithm</a></li>
<li><a href="/wiki/Huffman_coding" title="Huffman coding">Huffman coding</a></li>
<li><a href="/wiki/Ctrie" title="Ctrie">Ctrie</a></li>
<li><a href="/wiki/HAT-trie" title="HAT-trie">HAT-trie</a></li>
<li><a href="/wiki/Bitwise_trie_with_bitmap" title="Bitwise trie with bitmap">Bitwise trie with bitmap</a></li></ul>
</div>
<h2><span class="mw-headline" id="References">References</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Trie&amp;action=edit&amp;section=16" title="Edit section: References">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<style data-mw-deduplicate="TemplateStyles:r1011085734">.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}</style><div class="reflist reflist-columns references-column-width" style="column-width: 30em;">
<ol class="references">
<li id="cite_note-thue-1"><span class="mw-cite-backlink"><b><a href="#cite_ref-thue_1-0">^</a></b></span> <span class="reference-text"><style data-mw-deduplicate="TemplateStyles:r999302996">.mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}</style><cite id="CITEREFThue1912" class="citation journal cs1">Thue, Axel (1912). <a rel="nofollow" class="external text" href="https://archive.org/details/skrifterutgitavv121chri/page/n11/mode/2up">"Über die gegenseitige Lage gleicher Teile gewisser Zeichenreihen"</a>. <i>Skrifter udgivne af Videnskabs-Selskabet i Christiania</i>. <b>1912</b> (1): 1–67.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Skrifter+udgivne+af+Videnskabs-Selskabet+i+Christiania&amp;rft.atitle=%C3%9Cber+die+gegenseitige+Lage+gleicher+Teile+gewisser+Zeichenreihen&amp;rft.volume=1912&amp;rft.issue=1&amp;rft.pages=1-67&amp;rft.date=1912&amp;rft.aulast=Thue&amp;rft.aufirst=Axel&amp;rft_id=https%3A%2F%2Farchive.org%2Fdetails%2Fskrifterutgitavv121chri%2Fpage%2Fn11%2Fmode%2F2up&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrie" class="Z3988"></span> Cited by Knuth.</span>
</li>
<li id="cite_note-KnuthVol3-2"><span class="mw-cite-backlink">^ <a href="#cite_ref-KnuthVol3_2-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-KnuthVol3_2-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-KnuthVol3_2-2"><sup><i><b>c</b></i></sup></a></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"/><cite id="CITEREFKnuth1997" class="citation book cs1"><a href="/wiki/Donald_Knuth" title="Donald Knuth">Knuth, Donald</a> (1997). "6.3: Digital Searching". <i>The Art of Computer Programming Volume 3: Sorting and Searching</i> (2nd&#160;ed.). Addison-Wesley. p.&#160;492. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&#160;<a href="/wiki/Special:BookSources/0-201-89685-0" title="Special:BookSources/0-201-89685-0"><bdi>0-201-89685-0</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.atitle=6.3%3A+Digital+Searching&amp;rft.btitle=The+Art+of+Computer+Programming+Volume+3%3A+Sorting+and+Searching&amp;rft.pages=492&amp;rft.edition=2nd&amp;rft.pub=Addison-Wesley&amp;rft.date=1997&amp;rft.isbn=0-201-89685-0&amp;rft.aulast=Knuth&amp;rft.aufirst=Donald&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrie" class="Z3988"></span></span>
</li>
<li id="cite_note-3"><span class="mw-cite-backlink"><b><a href="#cite_ref-3">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"/><cite id="CITEREFde_la_Briandais1959" class="citation conference cs1">de la Briandais, René (1959). <a rel="nofollow" class="external text" href="https://web.archive.org/web/20200211163605/https://pdfs.semanticscholar.org/3ce3/f4cc1c91d03850ed84ef96a08498e018d18f.pdf"><i>File searching using variable length keys</i></a> <span class="cs1-format">(PDF)</span>. Proc. Western J. Computer Conf. pp.&#160;295–298. Archived from <a rel="nofollow" class="external text" href="https://pdfs.semanticscholar.org/3ce3/f4cc1c91d03850ed84ef96a08498e018d18f.pdf">the original</a> <span class="cs1-format">(PDF)</span> on 2020-02-11.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=conference&amp;rft.btitle=File+searching+using+variable+length+keys&amp;rft.pages=295-298&amp;rft.date=1959&amp;rft.aulast=de+la+Briandais&amp;rft.aufirst=Ren%C3%A9&amp;rft_id=https%3A%2F%2Fpdfs.semanticscholar.org%2F3ce3%2Ff4cc1c91d03850ed84ef96a08498e018d18f.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrie" class="Z3988"></span> Cited by Brass and by Knuth.</span>
</li>
<li id="cite_note-brass-4"><span class="mw-cite-backlink">^ <a href="#cite_ref-brass_4-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-brass_4-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-brass_4-2"><sup><i><b>c</b></i></sup></a> <a href="#cite_ref-brass_4-3"><sup><i><b>d</b></i></sup></a></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"/><cite id="CITEREFBrass2008" class="citation book cs1">Brass, Peter (2008). <i>Advanced Data Structures</i>. Cambridge University Press. p.&#160;336.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Advanced+Data+Structures&amp;rft.pages=336&amp;rft.pub=Cambridge+University+Press&amp;rft.date=2008&amp;rft.aulast=Brass&amp;rft.aufirst=Peter&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrie" class="Z3988"></span></span>
</li>
<li id="cite_note-triememory-5"><span class="mw-cite-backlink">^ <a href="#cite_ref-triememory_5-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-triememory_5-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"/><cite id="CITEREFEdward_Fredkin1960" class="citation journal cs1"><a href="/wiki/Edward_Fredkin" title="Edward Fredkin">Edward Fredkin</a> (1960). "Trie Memory". <i>Communications of the ACM</i>. <b>3</b> (9): 490–499. <a href="/wiki/Doi_(identifier)" class="mw-redirect" title="Doi (identifier)">doi</a>:<a rel="nofollow" class="external text" href="https://doi.org/10.1145%2F367390.367400">10.1145/367390.367400</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Communications+of+the+ACM&amp;rft.atitle=Trie+Memory&amp;rft.volume=3&amp;rft.issue=9&amp;rft.pages=490-499&amp;rft.date=1960&amp;rft_id=info%3Adoi%2F10.1145%2F367390.367400&amp;rft.au=Edward+Fredkin&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrie" class="Z3988"></span></span>
</li>
<li id="cite_note-DADS-6"><span class="mw-cite-backlink">^ <a href="#cite_ref-DADS_6-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-DADS_6-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"/><cite id="CITEREFBlack2009" class="citation web cs1">Black, Paul E. (2009-11-16). <a rel="nofollow" class="external text" href="https://xlinux.nist.gov/dads/HTML/trie.html">"trie"</a>. <i>Dictionary of Algorithms and Data Structures</i>. <a href="/wiki/National_Institute_of_Standards_and_Technology" title="National Institute of Standards and Technology">National Institute of Standards and Technology</a>. <a rel="nofollow" class="external text" href="https://web.archive.org/web/20110429080033/http://xlinux.nist.gov/dads/HTML/trie.html">Archived</a> from the original on 2011-04-29.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=Dictionary+of+Algorithms+and+Data+Structures&amp;rft.atitle=trie&amp;rft.date=2009-11-16&amp;rft.aulast=Black&amp;rft.aufirst=Paul+E.&amp;rft_id=https%3A%2F%2Fxlinux.nist.gov%2Fdads%2FHTML%2Ftrie.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrie" class="Z3988"></span></span>
</li>
<li id="cite_note-Liang1983-7"><span class="mw-cite-backlink">^ <a href="#cite_ref-Liang1983_7-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Liang1983_7-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-Liang1983_7-2"><sup><i><b>c</b></i></sup></a> <a href="#cite_ref-Liang1983_7-3"><sup><i><b>d</b></i></sup></a></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"/><cite id="CITEREFFranklin_Mark_Liang1983" class="citation thesis cs1">Franklin Mark Liang (1983). <a rel="nofollow" class="external text" href="http://www.tug.org/docs/liang/liang-thesis.pdf"><i>Word Hy-phen-a-tion By Com-put-er</i></a> <span class="cs1-format">(PDF)</span> (Doctor of Philosophy thesis). Stanford University. <a rel="nofollow" class="external text" href="https://web.archive.org/web/20051111105124/http://www.tug.org/docs/liang/liang-thesis.pdf">Archived</a> <span class="cs1-format">(PDF)</span> from the original on 2005-11-11<span class="reference-accessdate">. Retrieved <span class="nowrap">2010-03-28</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Adissertation&amp;rft.title=Word+Hy-phen-a-tion+By+Com-put-er&amp;rft.degree=Doctor+of+Philosophy&amp;rft.inst=Stanford+University&amp;rft.date=1983&amp;rft.au=Franklin+Mark+Liang&amp;rft_id=http%3A%2F%2Fwww.tug.org%2Fdocs%2Fliang%2Fliang-thesis.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrie" class="Z3988"></span></span>
</li>
<li id="cite_note-8"><span class="mw-cite-backlink"><b><a href="#cite_ref-8">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"/><cite id="CITEREFAhoCorasick1975" class="citation journal cs1">Aho, Alfred V.; Corasick, Margaret J. (Jun 1975). <a rel="nofollow" class="external text" href="https://pdfs.semanticscholar.org/3547/ac839d02f6efe3f6f76a8289738a22528442.pdf">"Efficient String Matching: An Aid to Bibliographic Search"</a> <span class="cs1-format">(PDF)</span>. <i><a href="/wiki/Communications_of_the_ACM" title="Communications of the ACM">Communications of the ACM</a></i>. <b>18</b> (6): 333–340. <a href="/wiki/Doi_(identifier)" class="mw-redirect" title="Doi (identifier)">doi</a>:<a rel="nofollow" class="external text" href="https://doi.org/10.1145%2F360825.360855">10.1145/360825.360855</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Communications+of+the+ACM&amp;rft.atitle=Efficient+String+Matching%3A+An+Aid+to+Bibliographic+Search&amp;rft.volume=18&amp;rft.issue=6&amp;rft.pages=333-340&amp;rft.date=1975-06&amp;rft_id=info%3Adoi%2F10.1145%2F360825.360855&amp;rft.aulast=Aho&amp;rft.aufirst=Alfred+V.&amp;rft.au=Corasick%2C+Margaret+J.&amp;rft_id=https%3A%2F%2Fpdfs.semanticscholar.org%2F3547%2Fac839d02f6efe3f6f76a8289738a22528442.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrie" class="Z3988"></span></span>
</li>
<li id="cite_note-:0-9"><span class="mw-cite-backlink">^ <a href="#cite_ref-:0_9-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-:0_9-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"/><cite id="CITEREFSedgewickWayne2020" class="citation web cs1">Sedgewick, Robert; Wayne, Kevin (June 12, 2020). <a rel="nofollow" class="external text" href="https://algs4.cs.princeton.edu/52trie/">"Tries"</a>. <i>algs4.cs.princeton.edu</i><span class="reference-accessdate">. Retrieved <span class="nowrap">2020-08-11</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=algs4.cs.princeton.edu&amp;rft.atitle=Tries&amp;rft.date=2020-06-12&amp;rft.aulast=Sedgewick&amp;rft.aufirst=Robert&amp;rft.au=Wayne%2C+Kevin&amp;rft_id=https%3A%2F%2Falgs4.cs.princeton.edu%2F52trie%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrie" class="Z3988"></span></span>
</li>
<li id="cite_note-10"><span class="mw-cite-backlink"><b><a href="#cite_ref-10">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"/><cite id="CITEREFKärkkäinen" class="citation web cs1">Kärkkäinen, Juha. <a rel="nofollow" class="external text" href="https://www.cs.helsinki.fi/u/tpkarkka/opetus/12s/spa/lecture02.pdf">"Lecture 2"</a> <span class="cs1-format">(PDF)</span>. <a href="/wiki/University_of_Helsinki" title="University of Helsinki">University of Helsinki</a>. <q>The preorder of the nodes in a trie is the same as the lexicographical order of the strings they represent assuming the children of a node are ordered by the edge labels.</q></cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Lecture+2&amp;rft.pub=University+of+Helsinki&amp;rft.aulast=K%C3%A4rkk%C3%A4inen&amp;rft.aufirst=Juha&amp;rft_id=https%3A%2F%2Fwww.cs.helsinki.fi%2Fu%2Ftpkarkka%2Fopetus%2F12s%2Fspa%2Flecture02.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrie" class="Z3988"></span></span>
</li>
<li id="cite_note-11"><span class="mw-cite-backlink"><b><a href="#cite_ref-11">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"/><cite id="CITEREFKallis2018" class="citation web cs1">Kallis, Rafael (2018). <a rel="nofollow" class="external text" href="https://www.ifi.uzh.ch/dam/jcr:27d15f69-2a44-40f9-8b41-6d11b5926c67/ReportKallisMScBasis.pdf">"The Adaptive Radix Tree (Report #14-708-887)"</a> <span class="cs1-format">(PDF)</span>. <i>University of Zurich: Department of Informatics, Research Publications</i>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=University+of+Zurich%3A+Department+of+Informatics%2C+Research+Publications&amp;rft.atitle=The+Adaptive+Radix+Tree+%28Report+%2314-708-887%29&amp;rft.date=2018&amp;rft.aulast=Kallis&amp;rft.aufirst=Rafael&amp;rft_id=https%3A%2F%2Fwww.ifi.uzh.ch%2Fdam%2Fjcr%3A27d15f69-2a44-40f9-8b41-6d11b5926c67%2FReportKallisMScBasis.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrie" class="Z3988"></span></span>
</li>
<li id="cite_note-cachestringsort-12"><span class="mw-cite-backlink"><b><a href="#cite_ref-cachestringsort_12-0">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"/><cite id="CITEREFRanjan_Sinha_and_Justin_Zobel_and_David_Ring2006" class="citation journal cs1">Ranjan Sinha and Justin Zobel and David Ring (Feb 2006). <a rel="nofollow" class="external text" href="https://people.eng.unimelb.edu.au/jzobel/fulltext/acmjea06.pdf">"Cache-Efficient String Sorting Using Copying"</a> <span class="cs1-format">(PDF)</span>. <i>ACM Journal of Experimental Algorithmics</i>. <b>11</b>: 1–32. <a href="/wiki/Doi_(identifier)" class="mw-redirect" title="Doi (identifier)">doi</a>:<a rel="nofollow" class="external text" href="https://doi.org/10.1145%2F1187436.1187439">10.1145/1187436.1187439</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=ACM+Journal+of+Experimental+Algorithmics&amp;rft.atitle=Cache-Efficient+String+Sorting+Using+Copying&amp;rft.volume=11&amp;rft.pages=1-32&amp;rft.date=2006-02&amp;rft_id=info%3Adoi%2F10.1145%2F1187436.1187439&amp;rft.au=Ranjan+Sinha+and+Justin+Zobel+and+David+Ring&amp;rft_id=https%3A%2F%2Fpeople.eng.unimelb.edu.au%2Fjzobel%2Ffulltext%2Facmjea06.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrie" class="Z3988"></span></span>
</li>
<li id="cite_note-stringradix-13"><span class="mw-cite-backlink"><b><a href="#cite_ref-stringradix_13-0">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"/><cite id="CITEREFJ._Kärkkäinen_and_T._Rantala2008" class="citation book cs1">J. Kärkkäinen and T. Rantala (2008). "Engineering Radix Sort for Strings".  In A. Amir and A. Turpin and A. Moffat (ed.). <i>String Processing and Information Retrieval, Proc. SPIRE</i>. Lecture Notes in Computer Science. <b>5280</b>. Springer. pp.&#160;3–14. <a href="/wiki/Doi_(identifier)" class="mw-redirect" title="Doi (identifier)">doi</a>:<a rel="nofollow" class="external text" href="https://doi.org/10.1007%2F978-3-540-89097-3_3">10.1007/978-3-540-89097-3_3</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.atitle=Engineering+Radix+Sort+for+Strings&amp;rft.btitle=String+Processing+and+Information+Retrieval%2C+Proc.+SPIRE&amp;rft.series=Lecture+Notes+in+Computer+Science&amp;rft.pages=3-14&amp;rft.pub=Springer&amp;rft.date=2008&amp;rft_id=info%3Adoi%2F10.1007%2F978-3-540-89097-3_3&amp;rft.au=J.+K%C3%A4rkk%C3%A4inen+and+T.+Rantala&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrie" class="Z3988"></span></span>
</li>
<li id="cite_note-allison-14"><span class="mw-cite-backlink">^ <a href="#cite_ref-allison_14-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-allison_14-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"/><cite id="CITEREFAllison" class="citation web cs1">Allison, Lloyd. <a rel="nofollow" class="external text" href="http://www.allisons.org/ll/AlgDS/Tree/Trie/">"Tries"</a><span class="reference-accessdate">. Retrieved <span class="nowrap">18 February</span> 2014</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Tries&amp;rft.aulast=Allison&amp;rft.aufirst=Lloyd&amp;rft_id=http%3A%2F%2Fwww.allisons.org%2Fll%2FAlgDS%2FTree%2FTrie%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrie" class="Z3988"></span></span>
</li>
<li id="cite_note-15"><span class="mw-cite-backlink"><b><a href="#cite_ref-15">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"/><cite id="CITEREFSahni" class="citation web cs1">Sahni, Sartaj. <a rel="nofollow" class="external text" href="https://www.cise.ufl.edu/~sahni/dsaaj/enrich/c16/tries.htm">"Tries"</a>. <i>Data Structures, Algorithms, &amp; Applications in Java</i>. University of Florida<span class="reference-accessdate">. Retrieved <span class="nowrap">18 February</span> 2014</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=Data+Structures%2C+Algorithms%2C+%26+Applications+in+Java&amp;rft.atitle=Tries&amp;rft.aulast=Sahni&amp;rft.aufirst=Sartaj&amp;rft_id=https%3A%2F%2Fwww.cise.ufl.edu%2F~sahni%2Fdsaaj%2Fenrich%2Fc16%2Ftries.htm&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrie" class="Z3988"></span></span>
</li>
<li id="cite_note-16"><span class="mw-cite-backlink"><b><a href="#cite_ref-16">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"/><cite id="CITEREFBellekens2014" class="citation book cs1">Bellekens, Xavier (2014). "A Highly-Efficient Memory-Compression Scheme for GPU-Accelerated Intrusion Detection Systems". <i>Proceedings of the 7th International Conference on Security of Information and Networks - SIN '14</i>. Glasgow, Scotland, UK: ACM. pp.&#160;302:302–302:309. <a href="/wiki/ArXiv_(identifier)" class="mw-redirect" title="ArXiv (identifier)">arXiv</a>:<span class="cs1-lock-free" title="Freely accessible"><a rel="nofollow" class="external text" href="//arxiv.org/abs/1704.02272">1704.02272</a></span>. <a href="/wiki/Doi_(identifier)" class="mw-redirect" title="Doi (identifier)">doi</a>:<a rel="nofollow" class="external text" href="https://doi.org/10.1145%2F2659651.2659723">10.1145/2659651.2659723</a>. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&#160;<a href="/wiki/Special:BookSources/978-1-4503-3033-6" title="Special:BookSources/978-1-4503-3033-6"><bdi>978-1-4503-3033-6</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.atitle=A+Highly-Efficient+Memory-Compression+Scheme+for+GPU-Accelerated+Intrusion+Detection+Systems&amp;rft.btitle=Proceedings+of+the+7th+International+Conference+on+Security+of+Information+and+Networks+-+SIN+%2714&amp;rft.place=Glasgow%2C+Scotland%2C+UK&amp;rft.pages=302%3A302-302%3A309&amp;rft.pub=ACM&amp;rft.date=2014&amp;rft_id=info%3Aarxiv%2F1704.02272&amp;rft_id=info%3Adoi%2F10.1145%2F2659651.2659723&amp;rft.isbn=978-1-4503-3033-6&amp;rft.aulast=Bellekens&amp;rft.aufirst=Xavier&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrie" class="Z3988"></span></span>
</li>
<li id="cite_note-dlmalloc-17"><span class="mw-cite-backlink"><b><a href="#cite_ref-dlmalloc_17-0">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"/><cite id="CITEREFLee" class="citation web cs1">Lee, Doug. <a rel="nofollow" class="external text" href="http://gee.cs.oswego.edu/dl/html/malloc.html">"A Memory Allocator"</a><span class="reference-accessdate">. Retrieved <span class="nowrap">1 December</span> 2019</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=A+Memory+Allocator&amp;rft.aulast=Lee&amp;rft.aufirst=Doug&amp;rft_id=http%3A%2F%2Fgee.cs.oswego.edu%2Fdl%2Fhtml%2Fmalloc.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrie" class="Z3988"></span> <a rel="nofollow" class="external text" href="http://gee.cs.oswego.edu/pub/misc/malloc.c">HTTP for Source Code</a>. Binary Trie is described in Version 2.8.6, Section "Overlaid data structures", Structure "malloc_tree_chunk".</span>
</li>
<li id="cite_note-18"><span class="mw-cite-backlink"><b><a href="#cite_ref-18">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"/><cite id="CITEREFJan_DaciukStoyan_MihovBruce_W._WatsonRichard_E._Watson2000" class="citation journal cs1">Jan Daciuk; Stoyan Mihov; Bruce W. Watson; Richard E. Watson (2000). <a rel="nofollow" class="external text" href="https://web.archive.org/web/20110930080314/http://www.eti.pg.gda.pl/katedry/kiw/pracownicy/Jan.Daciuk/personal/daciuk98.ps.gz">"Incremental Construction of Minimal Acyclic Finite-State Automata"</a>. <i>Computational Linguistics</i>. Association for Computational Linguistics. <b>26</b>: 3–16. <a href="/wiki/ArXiv_(identifier)" class="mw-redirect" title="ArXiv (identifier)">arXiv</a>:<span class="cs1-lock-free" title="Freely accessible"><a rel="nofollow" class="external text" href="//arxiv.org/abs/cs/0007009">cs/0007009</a></span>. <a href="/wiki/Doi_(identifier)" class="mw-redirect" title="Doi (identifier)">doi</a>:<a rel="nofollow" class="external text" href="https://doi.org/10.1162%2F089120100561601">10.1162/089120100561601</a>. Archived from <a rel="nofollow" class="external text" href="http://www.pg.gda.pl/~jandac/daciuk98.ps.gz">the original</a> on 2011-09-30<span class="reference-accessdate">. Retrieved <span class="nowrap">2009-05-28</span></span>. <q>This paper presents a method for direct building of minimal acyclic finite states automaton which recognizes a given finite list of words in lexicographical order. Our approach is to construct a minimal automaton in a single phase by adding new strings one by one and minimizing the resulting automaton on-the-fly</q></cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Computational+Linguistics&amp;rft.atitle=Incremental+Construction+of+Minimal+Acyclic+Finite-State+Automata&amp;rft.volume=26&amp;rft.pages=3-16&amp;rft.date=2000&amp;rft_id=info%3Aarxiv%2Fcs%2F0007009&amp;rft_id=info%3Adoi%2F10.1162%2F089120100561601&amp;rft.au=Jan+Daciuk&amp;rft.au=Stoyan+Mihov&amp;rft.au=Bruce+W.+Watson&amp;rft.au=Richard+E.+Watson&amp;rft_id=http%3A%2F%2Fwww.pg.gda.pl%2F~jandac%2Fdaciuk98.ps.gz&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrie" class="Z3988"></span> <a rel="nofollow" class="external text" href="http://www.mitpressjournals.org/doi/abs/10.1162/089120100561601">Alt URL</a></span>
</li>
<li id="cite_note-19"><span class="mw-cite-backlink"><b><a href="#cite_ref-19">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"/><cite id="CITEREFUlrich_GermannEric_JoanisSamuel_Larkin2009" class="citation web cs1">Ulrich Germann; Eric Joanis; Samuel Larkin (2009). <a rel="nofollow" class="external text" href="http://www.aclweb.org/anthology/W/W09/W09-1505.pdf">"Tightly packed tries: how to fit large models into memory, and make them load fast, too"</a> <span class="cs1-format">(PDF)</span>. <i>ACL Workshops: Proceedings of the Workshop on Software Engineering, Testing, and Quality Assurance for Natural Language Processing</i>. Association for Computational Linguistics. pp.&#160;31–39. <q>We present Tightly Packed Tries (TPTs), a compact implementation of read-only, compressed trie structures with fast on-demand paging and short load times. We demonstrate the benefits of TPTs for storing n-gram back-off language models and phrase tables for <a href="/wiki/Statistical_machine_translation" title="Statistical machine translation">statistical machine translation</a>. Encoded as TPTs, these databases require less space than flat text file representations of the same data compressed with the gzip utility. At the same time, they can be mapped into memory quickly and be searched directly in time linear in the length of the key, without the need to decompress the entire file. The overhead for local decompression during search is marginal.</q></cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=ACL+Workshops%3A+Proceedings+of+the+Workshop+on+Software+Engineering%2C+Testing%2C+and+Quality+Assurance+for+Natural+Language+Processing&amp;rft.atitle=Tightly+packed+tries%3A+how+to+fit+large+models+into+memory%2C+and+make+them+load+fast%2C+too&amp;rft.pages=31-39&amp;rft.date=2009&amp;rft.au=Ulrich+Germann&amp;rft.au=Eric+Joanis&amp;rft.au=Samuel+Larkin&amp;rft_id=http%3A%2F%2Fwww.aclweb.org%2Fanthology%2FW%2FW09%2FW09-1505.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrie" class="Z3988"></span></span>
</li>
<li id="cite_note-20"><span class="mw-cite-backlink"><b><a href="#cite_ref-20">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"/><cite id="CITEREFAskitisZobel2008" class="citation journal cs1">Askitis, Nikolas; Zobel, Justin (2008). <a rel="nofollow" class="external text" href="http://people.eng.unimelb.edu.au/jzobel/fulltext/vldbj09.pdf">"B-tries for Disk-based String Management"</a> <span class="cs1-format">(PDF)</span>. <i>VLDB Journal</i>: 1–26. <a href="/wiki/ISSN_(identifier)" class="mw-redirect" title="ISSN (identifier)">ISSN</a>&#160;<a rel="nofollow" class="external text" href="//www.worldcat.org/issn/1066-8888">1066-8888</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=VLDB+Journal&amp;rft.atitle=B-tries+for+Disk-based+String+Management&amp;rft.pages=1-26&amp;rft.date=2008&amp;rft.issn=1066-8888&amp;rft.aulast=Askitis&amp;rft.aufirst=Nikolas&amp;rft.au=Zobel%2C+Justin&amp;rft_id=http%3A%2F%2Fpeople.eng.unimelb.edu.au%2Fjzobel%2Ffulltext%2Fvldbj09.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ATrie" class="Z3988"></span></span>
</li>
</ol></div>
<h2><span class="mw-headline" id="External_links">External links</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Trie&amp;action=edit&amp;section=17" title="Edit section: External links">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<table role="presentation" class="mbox-small plainlinks sistersitebox" style="background-color:#f9f9f9;border:1px solid #aaa;color:#000">
<tbody><tr>
<td class="mbox-image"><img alt="" src="//upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/30px-Commons-logo.svg.png" decoding="async" width="30" height="40" class="noviewer" srcset="//upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/45px-Commons-logo.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/59px-Commons-logo.svg.png 2x" data-file-width="1024" data-file-height="1376" /></td>
<td class="mbox-text plainlist">Wikimedia Commons has media related to <span style="font-weight: bold; font-style: italic;"><a href="https://commons.wikimedia.org/wiki/Category:Trie" class="extiw" title="commons:Category:Trie">Trie</a></span>.</td></tr>
</tbody></table>
<table role="presentation" class="mbox-small plainlinks sistersitebox" style="background-color:#f9f9f9;border:1px solid #aaa;color:#000">
<tbody><tr>
<td class="mbox-image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/99/Wiktionary-logo-en-v2.svg/40px-Wiktionary-logo-en-v2.svg.png" decoding="async" width="40" height="40" class="noviewer" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/99/Wiktionary-logo-en-v2.svg/60px-Wiktionary-logo-en-v2.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/99/Wiktionary-logo-en-v2.svg/80px-Wiktionary-logo-en-v2.svg.png 2x" data-file-width="512" data-file-height="512" /></td>
<td class="mbox-text plainlist">Look up <i><b><a href="https://en.wiktionary.org/wiki/Special:Search/trie" class="extiw" title="wiktionary:Special:Search/trie">trie</a></b></i> in Wiktionary, the free dictionary.</td></tr>
</tbody></table>
<ul><li><a rel="nofollow" class="external text" href="https://xlinux.nist.gov/dads/HTML/trie.html">NIST's Dictionary of Algorithms and Data Structures: Trie</a></li></ul>
<div role="navigation" class="navbox" aria-labelledby="Tree_data_structures" style="padding:3px"><table class="nowraplinks mw-collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit"><tbody><tr><th scope="col" class="navbox-title" colspan="2"><style data-mw-deduplicate="TemplateStyles:r992953826">.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}.mw-parser-output .infobox .navbar{font-size:100%}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}</style><div class="navbar plainlinks hlist navbar-mini"><ul><li class="nv-view"><a href="/wiki/Template:CS_trees" title="Template:CS trees"><abbr title="View this template" style=";;background:none transparent;border:none;box-shadow:none;padding:0;;text-decoration:inherit;">v</abbr></a></li><li class="nv-talk"><a href="/wiki/Template_talk:CS_trees" title="Template talk:CS trees"><abbr title="Discuss this template" style=";;background:none transparent;border:none;box-shadow:none;padding:0;;text-decoration:inherit;">t</abbr></a></li><li class="nv-edit"><a class="external text" href="https://en.wikipedia.org/w/index.php?title=Template:CS_trees&amp;action=edit"><abbr title="Edit this template" style=";;background:none transparent;border:none;box-shadow:none;padding:0;;text-decoration:inherit;">e</abbr></a></li></ul></div><div id="Tree_data_structures" style="font-size:114%;margin:0 4em"><a href="/wiki/Tree_(data_structure)" title="Tree (data structure)">Tree data structures</a></div></th></tr><tr><th scope="row" class="navbox-group" style="width:1%"><a href="/wiki/Search_tree" title="Search tree">Search trees</a><br />(<a href="/wiki/Set_(abstract_data_type)" title="Set (abstract data type)">dynamic sets</a>/<a href="/wiki/Associative_array" title="Associative array">associative arrays</a>)</th><td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px"><div style="padding:0em 0.25em">
<ul><li><a href="/wiki/2%E2%80%933_tree" title="2–3 tree">2–3</a></li>
<li><a href="/wiki/2%E2%80%933%E2%80%934_tree" title="2–3–4 tree">2–3–4</a></li>
<li><a href="/wiki/AA_tree" title="AA tree">AA</a></li>
<li><a href="/wiki/(a,b)-tree" title="(a,b)-tree">(a,b)</a></li>
<li><a href="/wiki/AVL_tree" title="AVL tree">AVL</a></li>
<li><a href="/wiki/B-tree" title="B-tree">B</a></li>
<li><a href="/wiki/B%2B_tree" title="B+ tree">B+</a></li>
<li><a href="/wiki/B*-tree" class="mw-redirect" title="B*-tree">B*</a></li>
<li><a href="/wiki/Bx-tree" title="Bx-tree">B<sup>x</sup></a></li>
<li>(<a href="/wiki/Optimal_binary_search_tree" title="Optimal binary search tree">Optimal</a>)&#160;<a href="/wiki/Binary_search_tree" title="Binary search tree">Binary search</a></li>
<li><a href="/wiki/Dancing_tree" title="Dancing tree">Dancing</a></li>
<li><a href="/wiki/HTree" title="HTree">HTree</a></li>
<li><a href="/wiki/Interval_tree" title="Interval tree">Interval</a></li>
<li><a href="/wiki/Order_statistic_tree" title="Order statistic tree">Order statistic</a></li>
<li>(<a href="/wiki/Left-leaning_red%E2%80%93black_tree" title="Left-leaning red–black tree">Left-leaning</a>)&#160;<a href="/wiki/Red%E2%80%93black_tree" title="Red–black tree">Red–black</a></li>
<li><a href="/wiki/Scapegoat_tree" title="Scapegoat tree">Scapegoat</a></li>
<li><a href="/wiki/Splay_tree" title="Splay tree">Splay</a></li>
<li><a href="/wiki/T-tree" title="T-tree">T</a></li>
<li><a href="/wiki/Treap" title="Treap">Treap</a></li>
<li><a href="/wiki/UB-tree" title="UB-tree">UB</a></li>
<li><a href="/wiki/Weight-balanced_tree" title="Weight-balanced tree">Weight-balanced</a></li></ul>
</div></td></tr><tr><th scope="row" class="navbox-group" style="width:1%"><a href="/wiki/Heap_(data_structure)" title="Heap (data structure)">Heaps</a></th><td class="navbox-list navbox-even hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px"><div style="padding:0em 0.25em">
<ul><li><a href="/wiki/Binary_heap" title="Binary heap">Binary</a></li>
<li><a href="/wiki/Binomial_heap" title="Binomial heap">Binomial</a></li>
<li><a href="/wiki/Brodal_queue" title="Brodal queue">Brodal</a></li>
<li><a href="/wiki/Fibonacci_heap" title="Fibonacci heap">Fibonacci</a></li>
<li><a href="/wiki/Leftist_tree" title="Leftist tree">Leftist</a></li>
<li><a href="/wiki/Pairing_heap" title="Pairing heap">Pairing</a></li>
<li><a href="/wiki/Skew_heap" title="Skew heap">Skew</a></li>
<li><a href="/wiki/Van_Emde_Boas_tree" title="Van Emde Boas tree">van Emde Boas</a></li>
<li><a href="/wiki/Weak_heap" title="Weak heap">Weak</a></li></ul>
</div></td></tr><tr><th scope="row" class="navbox-group" style="width:1%"><a class="mw-selflink selflink">Tries</a></th><td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px"><div style="padding:0em 0.25em">
<ul><li><a href="/wiki/Ctrie" title="Ctrie">Ctrie</a></li>
<li><a href="/wiki/C-trie" title="C-trie">C-trie (compressed ADT)</a></li>
<li><a href="/wiki/Hash_tree_(persistent_data_structure)" title="Hash tree (persistent data structure)">Hash</a></li>
<li><a href="/wiki/Radix_tree" title="Radix tree">Radix</a></li>
<li><a href="/wiki/Suffix_tree" title="Suffix tree">Suffix</a></li>
<li><a href="/wiki/Ternary_search_tree" title="Ternary search tree">Ternary search</a></li>
<li><a href="/wiki/X-fast_trie" title="X-fast trie">X-fast</a></li>
<li><a href="/wiki/Y-fast_trie" title="Y-fast trie">Y-fast</a></li></ul>
</div></td></tr><tr><th scope="row" class="navbox-group" style="width:1%"><a href="/wiki/Spatial_index" class="mw-redirect" title="Spatial index">Spatial</a> data partitioning trees</th><td class="navbox-list navbox-even hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px"><div style="padding:0em 0.25em">
<ul><li><a href="/wiki/Ball_tree" title="Ball tree">Ball</a></li>
<li><a href="/wiki/BK-tree" title="BK-tree">BK</a></li>
<li><a href="/wiki/BSP_tree" class="mw-redirect" title="BSP tree">BSP</a></li>
<li><a href="/wiki/Cartesian_tree" title="Cartesian tree">Cartesian</a></li>
<li><a href="/wiki/Hilbert_R-tree" title="Hilbert R-tree">Hilbert R</a></li>
<li><a href="/wiki/K-d_tree" title="K-d tree"><i>k</i>-d</a> (<a href="/wiki/Implicit_k-d_tree" title="Implicit k-d tree">implicit <i>k</i>-d</a>)</li>
<li><a href="/wiki/M-tree" title="M-tree">M</a></li>
<li><a href="/wiki/Metric_tree" title="Metric tree">Metric</a></li>
<li><a href="/wiki/MVP_tree" class="mw-redirect" title="MVP tree">MVP</a></li>
<li><a href="/wiki/Octree" title="Octree">Octree</a></li>
<li><a href="/wiki/Priority_R-tree" title="Priority R-tree">Priority R</a></li>
<li><a href="/wiki/Quadtree" title="Quadtree">Quad</a></li>
<li><a href="/wiki/R-tree" title="R-tree">R</a></li>
<li><a href="/wiki/R%2B_tree" title="R+ tree">R+</a></li>
<li><a href="/wiki/R*_tree" title="R* tree">R*</a></li>
<li><a href="/wiki/Segment_tree" title="Segment tree">Segment</a></li>
<li><a href="/wiki/Vantage-point_tree" title="Vantage-point tree">VP</a></li>
<li><a href="/wiki/X-tree" title="X-tree">X</a></li></ul>
</div></td></tr><tr><th scope="row" class="navbox-group" style="width:1%">Other trees</th><td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px"><div style="padding:0em 0.25em">
<ul><li><a href="/wiki/Cover_tree" title="Cover tree">Cover</a></li>
<li><a href="/wiki/Exponential_tree" title="Exponential tree">Exponential</a></li>
<li><a href="/wiki/Fenwick_tree" title="Fenwick tree">Fenwick</a></li>
<li><a href="/wiki/Finger_tree" title="Finger tree">Finger</a></li>
<li><a href="/wiki/Fractal_tree_index" title="Fractal tree index">Fractal tree index</a></li>
<li><a href="/wiki/Fusion_tree" title="Fusion tree">Fusion</a></li>
<li><a href="/wiki/Hash_calendar" title="Hash calendar">Hash calendar</a></li>
<li><a href="/wiki/IDistance" title="IDistance">iDistance</a></li>
<li><a href="/wiki/K-ary_tree" class="mw-redirect" title="K-ary tree">K-ary</a></li>
<li><a href="/wiki/Left-child_right-sibling_binary_tree" title="Left-child right-sibling binary tree">Left-child right-sibling</a></li>
<li><a href="/wiki/Link/cut_tree" title="Link/cut tree">Link/cut</a></li>
<li><a href="/wiki/Log-structured_merge-tree" title="Log-structured merge-tree">Log-structured merge</a></li>
<li><a href="/wiki/Merkle_tree" title="Merkle tree">Merkle</a></li>
<li><a href="/wiki/PQ_tree" title="PQ tree">PQ</a></li>
<li><a href="/wiki/Range_tree" title="Range tree">Range</a></li>
<li><a href="/wiki/SPQR_tree" title="SPQR tree">SPQR</a></li>
<li><a href="/wiki/Top_tree" title="Top tree">Top</a></li></ul>
</div></td></tr></tbody></table></div>
<div role="navigation" class="navbox" aria-labelledby="Data_structures" style="padding:3px"><table class="nowraplinks hlist mw-collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit"><tbody><tr><th scope="col" class="navbox-title" colspan="2"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r992953826"/><div class="navbar plainlinks hlist navbar-mini"><ul><li class="nv-view"><a href="/wiki/Template:Data_structures" title="Template:Data structures"><abbr title="View this template" style=";;background:none transparent;border:none;box-shadow:none;padding:0;;text-decoration:inherit;">v</abbr></a></li><li class="nv-talk"><a href="/wiki/Template_talk:Data_structures" title="Template talk:Data structures"><abbr title="Discuss this template" style=";;background:none transparent;border:none;box-shadow:none;padding:0;;text-decoration:inherit;">t</abbr></a></li><li class="nv-edit"><a class="external text" href="https://en.wikipedia.org/w/index.php?title=Template:Data_structures&amp;action=edit"><abbr title="Edit this template" style=";;background:none transparent;border:none;box-shadow:none;padding:0;;text-decoration:inherit;">e</abbr></a></li></ul></div><div id="Data_structures" style="font-size:114%;margin:0 4em"><a href="/wiki/Data_structure" title="Data structure">Data structures</a></div></th></tr><tr><th scope="row" class="navbox-group" style="width:1%">Types</th><td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px"><div style="padding:0em 0.25em">
<ul><li><a href="/wiki/Collection_(abstract_data_type)" title="Collection (abstract data type)">Collection</a></li>
<li><a href="/wiki/Container_(abstract_data_type)" title="Container (abstract data type)">Container</a></li></ul>
</div></td></tr><tr><th scope="row" class="navbox-group" style="width:1%"><a href="/wiki/Abstract_data_type" title="Abstract data type">Abstract</a></th><td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px"><div style="padding:0em 0.25em">
<ul><li><a href="/wiki/Associative_array" title="Associative array">Associative array</a>
<ul><li><a href="/wiki/Multimap" title="Multimap">Multimap</a></li>
<li><a href="/wiki/Retrieval_Data_Structure" title="Retrieval Data Structure">Retrieval Data Structure</a></li></ul></li>
<li><a href="/wiki/List_(abstract_data_type)" title="List (abstract data type)">List</a></li>
<li><a href="/wiki/Stack_(abstract_data_type)" title="Stack (abstract data type)">Stack</a></li>
<li><a href="/wiki/Queue_(abstract_data_type)" title="Queue (abstract data type)">Queue</a>
<ul><li><a href="/wiki/Double-ended_queue" title="Double-ended queue">Double-ended queue</a></li></ul></li>
<li><a href="/wiki/Priority_queue" title="Priority queue">Priority queue</a>
<ul><li><a href="/wiki/Double-ended_priority_queue" title="Double-ended priority queue">Double-ended priority queue</a></li></ul></li>
<li><a href="/wiki/Set_(abstract_data_type)" title="Set (abstract data type)">Set</a>
<ul><li><a href="/wiki/Set_(abstract_data_type)#Multiset" title="Set (abstract data type)">Multiset</a></li>
<li><a href="/wiki/Disjoint-set_data_structure" title="Disjoint-set data structure">Disjoint-set</a></li></ul></li></ul>
</div></td></tr><tr><th scope="row" class="navbox-group" style="width:1%"><a href="/wiki/Array_data_structure" title="Array data structure">Arrays</a></th><td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px"><div style="padding:0em 0.25em">
<ul><li><a href="/wiki/Bit_array" title="Bit array">Bit array</a></li>
<li><a href="/wiki/Circular_buffer" title="Circular buffer">Circular buffer</a></li>
<li><a href="/wiki/Dynamic_array" title="Dynamic array">Dynamic array</a></li>
<li><a href="/wiki/Hash_table" title="Hash table">Hash table</a></li>
<li><a href="/wiki/Hashed_array_tree" title="Hashed array tree">Hashed array tree</a></li>
<li><a href="/wiki/Sparse_matrix" title="Sparse matrix">Sparse matrix</a></li></ul>
</div></td></tr><tr><th scope="row" class="navbox-group" style="width:1%"><a href="/wiki/Linked_data_structure" title="Linked data structure">Linked</a></th><td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px"><div style="padding:0em 0.25em">
<ul><li><a href="/wiki/Association_list" title="Association list">Association list</a></li>
<li><a href="/wiki/Linked_list" title="Linked list">Linked list</a></li>
<li><a href="/wiki/Skip_list" title="Skip list">Skip list</a></li>
<li><a href="/wiki/Unrolled_linked_list" title="Unrolled linked list">Unrolled linked list</a></li>
<li><a href="/wiki/XOR_linked_list" title="XOR linked list">XOR linked list</a></li></ul>
</div></td></tr><tr><th scope="row" class="navbox-group" style="width:1%"><a href="/wiki/Tree_(data_structure)" title="Tree (data structure)">Trees</a></th><td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px"><div style="padding:0em 0.25em">
<ul><li><a href="/wiki/B-tree" title="B-tree">B-tree</a></li>
<li><a href="/wiki/Binary_search_tree" title="Binary search tree">Binary search tree</a>
<ul><li><a href="/wiki/AA_tree" title="AA tree">AA tree</a></li>
<li><a href="/wiki/AVL_tree" title="AVL tree">AVL tree</a></li>
<li><a href="/wiki/Red%E2%80%93black_tree" title="Red–black tree">Red–black tree</a></li>
<li><a href="/wiki/Self-balancing_binary_search_tree" title="Self-balancing binary search tree">Self-balancing tree</a></li>
<li><a href="/wiki/Splay_tree" title="Splay tree">Splay tree</a></li></ul></li>
<li><a href="/wiki/Heap_(data_structure)" title="Heap (data structure)">Heap</a>
<ul><li><a href="/wiki/Binary_heap" title="Binary heap">Binary heap</a></li>
<li><a href="/wiki/Binomial_heap" title="Binomial heap">Binomial heap</a></li>
<li><a href="/wiki/Fibonacci_heap" title="Fibonacci heap">Fibonacci heap</a></li></ul></li>
<li><a href="/wiki/R-tree" title="R-tree">R-tree</a>
<ul><li><a href="/wiki/R*_tree" title="R* tree">R* tree</a></li>
<li><a href="/wiki/R%2B_tree" title="R+ tree">R+ tree</a></li>
<li><a href="/wiki/Hilbert_R-tree" title="Hilbert R-tree">Hilbert R-tree</a></li></ul></li>
<li><a class="mw-selflink selflink">Trie</a>
<ul><li><a href="/wiki/Hash_tree_(persistent_data_structure)" title="Hash tree (persistent data structure)">Hash tree</a></li></ul></li></ul>
</div></td></tr><tr><th scope="row" class="navbox-group" style="width:1%"><a href="/wiki/Graph_(abstract_data_type)" title="Graph (abstract data type)">Graphs</a></th><td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px"><div style="padding:0em 0.25em">
<ul><li><a href="/wiki/Binary_decision_diagram" title="Binary decision diagram">Binary decision diagram</a></li>
<li><a href="/wiki/Directed_acyclic_graph" title="Directed acyclic graph">Directed acyclic graph</a></li>
<li><a href="/wiki/Deterministic_acyclic_finite_state_automaton" title="Deterministic acyclic finite state automaton">Directed acyclic word graph</a></li></ul>
</div></td></tr><tr><td class="navbox-abovebelow" colspan="2"><div>
<ul><li><a href="/wiki/List_of_data_structures" title="List of data structures">List of data structures</a></li></ul>
</div></td></tr></tbody></table></div>
<div role="navigation" class="navbox" aria-labelledby="Strings" style="padding:3px"><table class="nowraplinks mw-collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit"><tbody><tr><th scope="col" class="navbox-title" colspan="2"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r992953826"/><div class="navbar plainlinks hlist navbar-mini"><ul><li class="nv-view"><a href="/wiki/Template:Strings" title="Template:Strings"><abbr title="View this template" style=";;background:none transparent;border:none;box-shadow:none;padding:0;;text-decoration:inherit;">v</abbr></a></li><li class="nv-talk"><a href="/wiki/Template_talk:Strings" title="Template talk:Strings"><abbr title="Discuss this template" style=";;background:none transparent;border:none;box-shadow:none;padding:0;;text-decoration:inherit;">t</abbr></a></li><li class="nv-edit"><a class="external text" href="https://en.wikipedia.org/w/index.php?title=Template:Strings&amp;action=edit"><abbr title="Edit this template" style=";;background:none transparent;border:none;box-shadow:none;padding:0;;text-decoration:inherit;">e</abbr></a></li></ul></div><div id="Strings" style="font-size:114%;margin:0 4em"><a href="/wiki/String_(computer_science)" title="String (computer science)">Strings</a></div></th></tr><tr><th scope="row" class="navbox-group" style="width:1%"><a href="/wiki/String_metric" title="String metric">String metric</a></th><td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px"><div style="padding:0em 0.25em">
<ul><li><a href="/wiki/Approximate_string_matching" title="Approximate string matching">Approximate string matching</a></li>
<li><a href="/wiki/Bitap_algorithm" title="Bitap algorithm">Bitap algorithm</a></li>
<li><a href="/wiki/Damerau%E2%80%93Levenshtein_distance" title="Damerau–Levenshtein distance">Damerau–Levenshtein distance</a></li>
<li><a href="/wiki/Edit_distance" title="Edit distance">Edit distance</a></li>
<li><a href="/wiki/Gestalt_Pattern_Matching" title="Gestalt Pattern Matching">Gestalt Pattern Matching</a></li>
<li><a href="/wiki/Hamming_distance" title="Hamming distance">Hamming distance</a></li>
<li><a href="/wiki/Jaro%E2%80%93Winkler_distance" title="Jaro–Winkler distance">Jaro–Winkler distance</a></li>
<li><a href="/wiki/Lee_distance" title="Lee distance">Lee distance</a></li>
<li><a href="/wiki/Levenshtein_automaton" title="Levenshtein automaton">Levenshtein automaton</a></li>
<li><a href="/wiki/Levenshtein_distance" title="Levenshtein distance">Levenshtein distance</a></li>
<li><a href="/wiki/Wagner%E2%80%93Fischer_algorithm" title="Wagner–Fischer algorithm">Wagner–Fischer algorithm </a></li></ul>
</div></td></tr><tr><th scope="row" class="navbox-group" style="width:1%"><a href="/wiki/String-searching_algorithm" title="String-searching algorithm">String-searching algorithm</a></th><td class="navbox-list navbox-even hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px"><div style="padding:0em 0.25em">
<ul><li><a href="/wiki/Apostolico%E2%80%93Giancarlo_algorithm" title="Apostolico–Giancarlo algorithm">Apostolico–Giancarlo algorithm</a></li>
<li><a href="/wiki/Boyer%E2%80%93Moore_string-search_algorithm" title="Boyer–Moore string-search algorithm">Boyer–Moore string-search algorithm</a></li>
<li><a href="/wiki/Boyer%E2%80%93Moore%E2%80%93Horspool_algorithm" title="Boyer–Moore–Horspool algorithm">Boyer–Moore–Horspool algorithm</a></li>
<li><a href="/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm" title="Knuth–Morris–Pratt algorithm">Knuth–Morris–Pratt algorithm</a></li>
<li><a href="/wiki/Rabin%E2%80%93Karp_algorithm" title="Rabin–Karp algorithm">Rabin–Karp algorithm</a></li></ul>
</div></td></tr><tr><th scope="row" class="navbox-group" style="width:1%">Multiple string searching</th><td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px"><div style="padding:0em 0.25em">
<ul><li><a href="/wiki/Aho%E2%80%93Corasick_algorithm" title="Aho–Corasick algorithm">Aho–Corasick</a></li>
<li><a href="/wiki/Commentz-Walter_algorithm" title="Commentz-Walter algorithm">Commentz-Walter algorithm</a></li></ul>
</div></td></tr><tr><th scope="row" class="navbox-group" style="width:1%"><a href="/wiki/Regular_expression" title="Regular expression">Regular expression</a></th><td class="navbox-list navbox-even hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px"><div style="padding:0em 0.25em">
<ul><li><a href="/wiki/Comparison_of_regular-expression_engines" title="Comparison of regular-expression engines">Comparison of regular-expression engines</a></li>
<li><a href="/wiki/Regular_grammar" title="Regular grammar">Regular grammar</a></li>
<li><a href="/wiki/Thompson%27s_construction" title="Thompson&#39;s construction">Thompson's construction</a></li>
<li><a href="/wiki/Nondeterministic_finite_automaton" title="Nondeterministic finite automaton">Nondeterministic finite automaton</a></li></ul>
</div></td></tr><tr><th scope="row" class="navbox-group" style="width:1%"><a href="/wiki/Sequence_alignment" title="Sequence alignment">Sequence alignment</a></th><td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px"><div style="padding:0em 0.25em">
<ul><li><a href="/wiki/Hirschberg%27s_algorithm" title="Hirschberg&#39;s algorithm">Hirschberg's algorithm</a></li>
<li><a href="/wiki/Needleman%E2%80%93Wunsch_algorithm" title="Needleman–Wunsch algorithm">Needleman–Wunsch algorithm</a></li>
<li><a href="/wiki/Smith%E2%80%93Waterman_algorithm" title="Smith–Waterman algorithm">Smith–Waterman algorithm</a></li></ul>
</div></td></tr><tr><th scope="row" class="navbox-group" style="width:1%"><a href="/wiki/Data_structure" title="Data structure">Data structure</a></th><td class="navbox-list navbox-even hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px"><div style="padding:0em 0.25em">
<ul><li><a href="/wiki/Deterministic_acyclic_finite_state_automaton" title="Deterministic acyclic finite state automaton">DAFSA</a></li>
<li><a href="/wiki/Suffix_array" title="Suffix array">Suffix array</a></li>
<li><a href="/wiki/Suffix_automaton" title="Suffix automaton">Suffix automaton</a></li>
<li><a href="/wiki/Suffix_tree" title="Suffix tree">Suffix tree</a></li>
<li><a href="/wiki/Generalized_suffix_tree" title="Generalized suffix tree">Generalized suffix tree</a></li>
<li><a href="/wiki/Rope_(data_structure)" title="Rope (data structure)">Rope</a></li>
<li><a href="/wiki/Ternary_search_tree" title="Ternary search tree">Ternary search tree</a></li>
<li><a class="mw-selflink selflink">Trie</a></li></ul>
</div></td></tr><tr><th scope="row" class="navbox-group" style="width:1%">Other</th><td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px"><div style="padding:0em 0.25em">
<ul><li><a href="/wiki/Parsing" title="Parsing">Parsing</a></li>
<li><a href="/wiki/Pattern_matching" title="Pattern matching">Pattern matching</a></li>
<li><a href="/wiki/Compressed_pattern_matching" title="Compressed pattern matching">Compressed pattern matching</a></li>
<li><a href="/wiki/Longest_common_subsequence_problem" title="Longest common subsequence problem">Longest common subsequence</a></li>
<li><a href="/wiki/Longest_common_substring_problem" title="Longest common substring problem">Longest common substring</a></li>
<li><a href="/wiki/Sequential_pattern_mining" title="Sequential pattern mining">Sequential pattern mining</a></li>
<li><a href="/wiki/Category:String_sorting_algorithms" title="Category:String sorting algorithms">Sorting</a></li></ul>
</div></td></tr></tbody></table></div>
<!-- 
NewPP limit report
Parsed by mw1367
Cached time: 20210926131846
Cache expiry: 1814400
Reduced expiry: false
Complications: [vary‐revision‐sha1]
CPU time usage: 0.837 seconds
Real time usage: 1.014 seconds
Preprocessor visited node count: 3933/1000000
Post‐expand include size: 97906/2097152 bytes
Template argument size: 2860/2097152 bytes
Highest expansion depth: 16/40
Expensive parser function count: 2/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 87836/5000000 bytes
Lua time usage: 0.372/10.000 seconds
Lua memory usage: 7913137/52428800 bytes
Number of Wikibase entities loaded: 0/400
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%  830.634      1 -total
 33.60%  279.083      1 Template:Reflist
 17.14%  142.379      6 Template:Cite_journal
 10.82%   89.865      1 Template:About
  7.58%   62.999      3 Template:R
  7.52%   62.479      6 Template:R/superscript
  6.31%   52.423      3 Template:Rp
  5.57%   46.306      2 Template:Citation_needed
  5.56%   46.162      3 Template:R/ref
  5.38%   44.663      8 Template:Cite_web
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:31274-0!canonical and timestamp 20210926131845 and revision id 1038125595. Serialized with JSON.
 -->
</div><noscript><img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" /></noscript>
<div class="printfooter">Retrieved from "<a dir="ltr" href="https://en.wikipedia.org/w/index.php?title=Trie&amp;oldid=1038125595">https://en.wikipedia.org/w/index.php?title=Trie&amp;oldid=1038125595</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/wiki/Help:Category" title="Help:Category">Categories</a>: <ul><li><a href="/wiki/Category:Trees_(data_structures)" title="Category:Trees (data structures)">Trees (data structures)</a></li><li><a href="/wiki/Category:Finite_automata" title="Category:Finite automata">Finite automata</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden categories: <ul><li><a href="/wiki/Category:Articles_with_short_description" title="Category:Articles with short description">Articles with short description</a></li><li><a href="/wiki/Category:Short_description_is_different_from_Wikidata" title="Category:Short description is different from Wikidata">Short description is different from Wikidata</a></li><li><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></li><li><a href="/wiki/Category:Articles_with_unsourced_statements_from_June_2017" title="Category:Articles with unsourced statements from June 2017">Articles with unsourced statements from June 2017</a></li><li><a href="/wiki/Category:Articles_needing_additional_references_from_February_2015" title="Category:Articles needing additional references from February 2015">Articles needing additional references from February 2015</a></li><li><a href="/wiki/Category:All_articles_needing_additional_references" title="Category:All articles needing additional references">All articles needing additional references</a></li><li><a href="/wiki/Category:Commons_category_link_from_Wikidata" title="Category:Commons category link from Wikidata">Commons category link from Wikidata</a></li><li><a href="/wiki/Category:Articles_with_example_Python_(programming_language)_code" title="Category:Articles with example Python (programming language) code">Articles with example Python (programming language) code</a></li></ul></div></div>
	</div>
</div>
<div id='mw-data-after-content'>
	<div class="read-more-container"></div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		<nav id="p-personal" class="mw-portlet mw-portlet-personal vector-user-menu-legacy vector-menu" aria-labelledby="p-personal-label" role="navigation" 
	 >
	<h3 id="p-personal-label" aria-label="" class="vector-menu-heading" >
		
		<span>Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-anonuserpage" class="mw-list-item">Not logged in</li><li id="pt-anontalk" class="mw-list-item"><a href="/wiki/Special:MyTalk" title="Discussion about edits from this IP address [n]" accesskey="n">Talk</a></li><li id="pt-anoncontribs" class="mw-list-item"><a href="/wiki/Special:MyContributions" title="A list of edits made from this IP address [y]" accesskey="y">Contributions</a></li><li id="pt-createaccount" class="mw-list-item"><a href="/w/index.php?title=Special:CreateAccount&amp;returnto=Trie" title="You are encouraged to create an account and log in; however, it is not mandatory">Create account</a></li><li id="pt-login" class="mw-list-item"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Trie" title="You&#039;re encouraged to log in; however, it&#039;s not mandatory. [o]" accesskey="o">Log in</a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			<nav id="p-namespaces" class="mw-portlet mw-portlet-namespaces vector-menu vector-menu-tabs" aria-labelledby="p-namespaces-label" role="navigation" 
	 >
	<h3 id="p-namespaces-label" aria-label="" class="vector-menu-heading" >
		
		<span>Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="/wiki/Trie" title="View the content page [c]" accesskey="c">Article</a></li><li id="ca-talk" class="mw-list-item"><a href="/wiki/Talk:Trie" rel="discussion" title="Discuss improvements to the content page [t]" accesskey="t">Talk</a></li></ul>
		
	</div>
</nav>

			<nav id="p-variants" class="mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown-noicon vector-menu vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation" 
	 >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class=" vector-menu-checkbox" aria-labelledby="p-variants-label" />
	<h3 id="p-variants-label" aria-label="Change language variant" class="vector-menu-heading" >
		
		<span>Variants</span>
			<span class="vector-menu-checkbox-expanded">expanded</span>
			<span class="vector-menu-checkbox-collapsed">collapsed</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			<nav id="p-views" class="mw-portlet mw-portlet-views vector-menu vector-menu-tabs" aria-labelledby="p-views-label" role="navigation" 
	 >
	<h3 id="p-views-label" aria-label="" class="vector-menu-heading" >
		
		<span>Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="/wiki/Trie">Read</a></li><li id="ca-edit" class="mw-list-item"><a href="/w/index.php?title=Trie&amp;action=edit" title="Edit this page [e]" accesskey="e">Edit</a></li><li id="ca-history" class="mw-list-item"><a href="/w/index.php?title=Trie&amp;action=history" title="Past revisions of this page [h]" accesskey="h">View history</a></li></ul>
		
	</div>
</nav>

			<nav id="p-cactions" class="mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown-noicon vector-menu vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options"
	 >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class=" vector-menu-checkbox" aria-labelledby="p-cactions-label" />
	<h3 id="p-cactions-label" aria-label="" class="vector-menu-heading" >
		
		<span>More</span>
			<span class="vector-menu-checkbox-expanded">expanded</span>
			<span class="vector-menu-checkbox-collapsed">collapsed</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			<div id="p-search" role="search" class="vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="/w/index.php" id="searchform">
			<div id="simpleSearch" data-search-loc="header-navigation">
				<input type="search" name="search" placeholder="Search Wikipedia" autocapitalize="sentences" title="Search Wikipedia [f]" accesskey="f" id="searchInput"/>
				<input type="hidden" name="title" value="Special:Search"/>
				<input type="submit" name="fulltext" value="Search" title="Search Wikipedia for this text" class="searchButton mw-fallbackSearchButton" id="mw-searchButton"/>
				<input type="submit" name="go" value="Go" title="Go to a page with this exact name if it exists" class="searchButton" id="searchButton"/>
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	
<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="/wiki/Main_Page"
			title="Visit the main page"></a>
	</div>
	<nav id="p-navigation" class="mw-portlet mw-portlet-navigation vector-menu vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation" 
	 >
	<h3 id="p-navigation-label" aria-label="" class="vector-menu-heading" >
		
		<span>Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage-description" class="mw-list-item"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li><li id="n-contents" class="mw-list-item"><a href="/wiki/Wikipedia:Contents" title="Guides to browsing Wikipedia">Contents</a></li><li id="n-currentevents" class="mw-list-item"><a href="/wiki/Portal:Current_events" title="Articles related to current events">Current events</a></li><li id="n-randompage" class="mw-list-item"><a href="/wiki/Special:Random" title="Visit a randomly selected article [x]" accesskey="x">Random article</a></li><li id="n-aboutsite" class="mw-list-item"><a href="/wiki/Wikipedia:About" title="Learn about Wikipedia and how it works">About Wikipedia</a></li><li id="n-contactpage" class="mw-list-item"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact us</a></li><li id="n-sitesupport" class="mw-list-item"><a href="https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_en.wikipedia.org&amp;uselang=en" title="Support us by donating to the Wikimedia Foundation">Donate</a></li></ul>
		
	</div>
</nav>

	<nav id="p-interaction" class="mw-portlet mw-portlet-interaction vector-menu vector-menu-portal portal" aria-labelledby="p-interaction-label" role="navigation" 
	 >
	<h3 id="p-interaction-label" aria-label="" class="vector-menu-heading" >
		
		<span>Contribute</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-help" class="mw-list-item"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li><li id="n-introduction" class="mw-list-item"><a href="/wiki/Help:Introduction" title="Learn how to edit Wikipedia">Learn to edit</a></li><li id="n-portal" class="mw-list-item"><a href="/wiki/Wikipedia:Community_portal" title="The hub for editors">Community portal</a></li><li id="n-recentchanges" class="mw-list-item"><a href="/wiki/Special:RecentChanges" title="A list of recent changes to Wikipedia [r]" accesskey="r">Recent changes</a></li><li id="n-upload" class="mw-list-item"><a href="/wiki/Wikipedia:File_Upload_Wizard" title="Add images or other media for use on Wikipedia">Upload file</a></li></ul>
		
	</div>
</nav>
<nav id="p-tb" class="mw-portlet mw-portlet-tb vector-menu vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation" 
	 >
	<h3 id="p-tb-label" aria-label="" class="vector-menu-heading" >
		
		<span>Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="/wiki/Special:WhatLinksHere/Trie" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="/wiki/Special:RecentChangesLinked/Trie" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li><li id="t-upload" class="mw-list-item"><a href="/wiki/Wikipedia:File_Upload_Wizard" title="Upload files [u]" accesskey="u">Upload file</a></li><li id="t-specialpages" class="mw-list-item"><a href="/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li><li id="t-permalink" class="mw-list-item"><a href="/w/index.php?title=Trie&amp;oldid=1038125595" title="Permanent link to this revision of this page">Permanent link</a></li><li id="t-info" class="mw-list-item"><a href="/w/index.php?title=Trie&amp;action=info" title="More information about this page">Page information</a></li><li id="t-cite" class="mw-list-item"><a href="/w/index.php?title=Special:CiteThisPage&amp;page=Trie&amp;id=1038125595&amp;wpFormIdentifier=titleform" title="Information on how to cite this page">Cite this page</a></li><li id="t-wikibase" class="mw-list-item"><a href="https://www.wikidata.org/wiki/Special:EntityPage/Q387015" title="Structured data on this page hosted by Wikidata [g]" accesskey="g">Wikidata item</a></li></ul>
		
	</div>
</nav>
<nav id="p-coll-print_export" class="mw-portlet mw-portlet-coll-print_export vector-menu vector-menu-portal portal" aria-labelledby="p-coll-print_export-label" role="navigation" 
	 >
	<h3 id="p-coll-print_export-label" aria-label="" class="vector-menu-heading" >
		
		<span>Print/export</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="coll-download-as-rl" class="mw-list-item"><a href="/w/index.php?title=Special:DownloadAsPdf&amp;page=Trie&amp;action=show-download-screen" title="Download this page as a PDF file">Download as PDF</a></li><li id="t-print" class="mw-list-item"><a href="/w/index.php?title=Trie&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li></ul>
		
	</div>
</nav>
<nav id="p-wikibase-otherprojects" class="mw-portlet mw-portlet-wikibase-otherprojects vector-menu vector-menu-portal portal" aria-labelledby="p-wikibase-otherprojects-label" role="navigation" 
	 >
	<h3 id="p-wikibase-otherprojects-label" aria-label="" class="vector-menu-heading" >
		
		<span>In other projects</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li class="wb-otherproject-link wb-otherproject-commons mw-list-item"><a href="https://commons.wikimedia.org/wiki/Category:Trie" hreflang="en">Wikimedia Commons</a></li></ul>
		
	</div>
</nav>

	<nav id="p-lang" class="mw-portlet mw-portlet-lang vector-menu vector-menu-portal portal" aria-labelledby="p-lang-label" role="navigation" 
	 >
	<h3 id="p-lang-label" aria-label="" class="vector-menu-heading" >
		
		<span>Languages</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li class="interlanguage-link interwiki-ar mw-list-item"><a href="https://ar.wikipedia.org/wiki/%D8%A7%D9%84%D8%B4%D8%AC%D8%B1%D8%A9_%D8%A7%D9%84%D8%B1%D9%82%D9%85%D9%8A%D8%A9" title="الشجرة الرقمية – Arabic" lang="ar" hreflang="ar" class="interlanguage-link-target">العربية</a></li><li class="interlanguage-link interwiki-be mw-list-item"><a href="https://be.wikipedia.org/wiki/%D0%9F%D1%80%D1%8D%D1%84%D1%96%D0%BA%D1%81%D0%BD%D0%B0%D0%B5_%D0%B4%D1%80%D1%8D%D0%B2%D0%B0" title="Прэфікснае дрэва – Belarusian" lang="be" hreflang="be" class="interlanguage-link-target">Беларуская</a></li><li class="interlanguage-link interwiki-ca mw-list-item"><a href="https://ca.wikipedia.org/wiki/Trie" title="Trie – Catalan" lang="ca" hreflang="ca" class="interlanguage-link-target">Català</a></li><li class="interlanguage-link interwiki-cs mw-list-item"><a href="https://cs.wikipedia.org/wiki/Trie" title="Trie – Czech" lang="cs" hreflang="cs" class="interlanguage-link-target">Čeština</a></li><li class="interlanguage-link interwiki-de mw-list-item"><a href="https://de.wikipedia.org/wiki/Trie" title="Trie – German" lang="de" hreflang="de" class="interlanguage-link-target">Deutsch</a></li><li class="interlanguage-link interwiki-et mw-list-item"><a href="https://et.wikipedia.org/wiki/Prefiksipuu" title="Prefiksipuu – Estonian" lang="et" hreflang="et" class="interlanguage-link-target">Eesti</a></li><li class="interlanguage-link interwiki-es mw-list-item"><a href="https://es.wikipedia.org/wiki/Trie" title="Trie – Spanish" lang="es" hreflang="es" class="interlanguage-link-target">Español</a></li><li class="interlanguage-link interwiki-fa mw-list-item"><a href="https://fa.wikipedia.org/wiki/%D8%AF%D8%B1%D8%AE%D8%AA_%D9%BE%DB%8C%D8%B4%D9%88%D9%86%D8%AF%DB%8C" title="درخت پیشوندی – Persian" lang="fa" hreflang="fa" class="interlanguage-link-target">فارسی</a></li><li class="interlanguage-link interwiki-fr mw-list-item"><a href="https://fr.wikipedia.org/wiki/Trie_(informatique)" title="Trie (informatique) – French" lang="fr" hreflang="fr" class="interlanguage-link-target">Français</a></li><li class="interlanguage-link interwiki-gl mw-list-item"><a href="https://gl.wikipedia.org/wiki/Trie" title="Trie – Galician" lang="gl" hreflang="gl" class="interlanguage-link-target">Galego</a></li><li class="interlanguage-link interwiki-ko mw-list-item"><a href="https://ko.wikipedia.org/wiki/%ED%8A%B8%EB%9D%BC%EC%9D%B4_(%EC%BB%B4%ED%93%A8%ED%8C%85)" title="트라이 (컴퓨팅) – Korean" lang="ko" hreflang="ko" class="interlanguage-link-target">한국어</a></li><li class="interlanguage-link interwiki-it mw-list-item"><a href="https://it.wikipedia.org/wiki/Trie" title="Trie – Italian" lang="it" hreflang="it" class="interlanguage-link-target">Italiano</a></li><li class="interlanguage-link interwiki-ja mw-list-item"><a href="https://ja.wikipedia.org/wiki/%E3%83%88%E3%83%A9%E3%82%A4_(%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0)" title="トライ (データ構造) – Japanese" lang="ja" hreflang="ja" class="interlanguage-link-target">日本語</a></li><li class="interlanguage-link interwiki-pl mw-list-item"><a href="https://pl.wikipedia.org/wiki/Drzewo_trie" title="Drzewo trie – Polish" lang="pl" hreflang="pl" class="interlanguage-link-target">Polski</a></li><li class="interlanguage-link interwiki-pt mw-list-item"><a href="https://pt.wikipedia.org/wiki/Trie" title="Trie – Portuguese" lang="pt" hreflang="pt" class="interlanguage-link-target">Português</a></li><li class="interlanguage-link interwiki-ru mw-list-item"><a href="https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B5%D1%84%D0%B8%D0%BA%D1%81%D0%BD%D0%BE%D0%B5_%D0%B4%D0%B5%D1%80%D0%B5%D0%B2%D0%BE" title="Префиксное дерево – Russian" lang="ru" hreflang="ru" class="interlanguage-link-target">Русский</a></li><li class="interlanguage-link interwiki-simple mw-list-item"><a href="https://simple.wikipedia.org/wiki/Trie" title="Trie – Simple English" lang="en-simple" hreflang="en-simple" class="interlanguage-link-target">Simple English</a></li><li class="interlanguage-link interwiki-sr mw-list-item"><a href="https://sr.wikipedia.org/wiki/%D0%A2%D1%80%D0%B8%D0%B5" title="Трие – Serbian" lang="sr" hreflang="sr" class="interlanguage-link-target">Српски / srpski</a></li><li class="interlanguage-link interwiki-th mw-list-item"><a href="https://th.wikipedia.org/wiki/%E0%B8%97%E0%B8%A3%E0%B8%B1%E0%B8%A2_(%E0%B9%82%E0%B8%84%E0%B8%A3%E0%B8%87%E0%B8%AA%E0%B8%A3%E0%B9%89%E0%B8%B2%E0%B8%87%E0%B8%82%E0%B9%89%E0%B8%AD%E0%B8%A1%E0%B8%B9%E0%B8%A5)" title="ทรัย (โครงสร้างข้อมูล) – Thai" lang="th" hreflang="th" class="interlanguage-link-target">ไทย</a></li><li class="interlanguage-link interwiki-uk mw-list-item"><a href="https://uk.wikipedia.org/wiki/%D0%9F%D1%80%D0%B5%D1%84%D1%96%D0%BA%D1%81%D0%BD%D0%B5_%D0%B4%D0%B5%D1%80%D0%B5%D0%B2%D0%BE" title="Префіксне дерево – Ukrainian" lang="uk" hreflang="uk" class="interlanguage-link-target">Українська</a></li><li class="interlanguage-link interwiki-vi mw-list-item"><a href="https://vi.wikipedia.org/wiki/Trie" title="Trie – Vietnamese" lang="vi" hreflang="vi" class="interlanguage-link-target">Tiếng Việt</a></li><li class="interlanguage-link interwiki-zh mw-list-item"><a href="https://zh.wikipedia.org/wiki/Trie" title="Trie – Chinese" lang="zh" hreflang="zh" class="interlanguage-link-target">中文</a></li></ul>
		<div class="after-portlet after-portlet-lang"><span class="wb-langlinks-edit wb-langlinks-link"><a href="https://www.wikidata.org/wiki/Special:EntityPage/Q387015#sitelinks-wikipedia" title="Edit interlanguage links" class="wbc-editpage">Edit links</a></span></div>
	</div>
</nav>

</div>

</div>
<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info" >
	<li id="footer-info-lastmod"> This page was last edited on 10 August 2021, at 17:33<span class="anonymous-show">&#160;(UTC)</span>.</li>
	<li id="footer-info-copyright">Text is available under the <a rel="license" href="//en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License">Creative Commons Attribution-ShareAlike License</a><a rel="license" href="//creativecommons.org/licenses/by-sa/3.0/" style="display:none;"></a>;
additional terms may apply.  By using this site, you agree to the <a href="//foundation.wikimedia.org/wiki/Terms_of_Use">Terms of Use</a> and <a href="//foundation.wikimedia.org/wiki/Privacy_policy">Privacy Policy</a>. Wikipedia® is a registered trademark of the <a href="//www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li>
</ul>

	<ul id="footer-places" >
	<li id="footer-places-privacy"><a href="https://foundation.wikimedia.org/wiki/Privacy_policy" class="extiw" title="wmf:Privacy policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
	<li id="footer-places-disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
	<li id="footer-places-contact"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a></li>
	<li id="footer-places-mobileview"><a href="//en.m.wikipedia.org/w/index.php?title=Trie&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
	<li id="footer-places-developers"><a href="https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute">Developers</a></li>
	<li id="footer-places-statslink"><a href="https://stats.wikimedia.org/#/en.wikipedia.org">Statistics</a></li>
	<li id="footer-places-cookiestatement"><a href="https://foundation.wikimedia.org/wiki/Cookie_statement">Cookie statement</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-copyrightico"><a href="https://wikimediafoundation.org/"><img src="/static/images/footer/wikimedia-button.png" srcset="/static/images/footer/wikimedia-button-1.5x.png 1.5x, /static/images/footer/wikimedia-button-2x.png 2x" width="88" height="31" alt="Wikimedia Foundation" loading="lazy" /></a></li>
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="/static/images/footer/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="/static/images/footer/poweredby_mediawiki_132x47.png 1.5x, /static/images/footer/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>


<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.837","walltime":"1.014","ppvisitednodes":{"value":3933,"limit":1000000},"postexpandincludesize":{"value":97906,"limit":2097152},"templateargumentsize":{"value":2860,"limit":2097152},"expansiondepth":{"value":16,"limit":40},"expensivefunctioncount":{"value":2,"limit":500},"unstrip-depth":{"value":1,"limit":20},"unstrip-size":{"value":87836,"limit":5000000},"entityaccesscount":{"value":0,"limit":400},"timingprofile":["100.00%  830.634      1 -total"," 33.60%  279.083      1 Template:Reflist"," 17.14%  142.379      6 Template:Cite_journal"," 10.82%   89.865      1 Template:About","  7.58%   62.999      3 Template:R","  7.52%   62.479      6 Template:R/superscript","  6.31%   52.423      3 Template:Rp","  5.57%   46.306      2 Template:Citation_needed","  5.56%   46.162      3 Template:R/ref","  5.38%   44.663      8 Template:Cite_web"]},"scribunto":{"limitreport-timeusage":{"value":"0.372","limit":"10.000"},"limitreport-memusage":{"value":7913137,"limit":52428800}},"cachereport":{"origin":"mw1367","timestamp":"20210926131846","ttl":1814400,"transientcontent":false}}});});</script>
<script type="application/ld+json">{"@context":"https:\/\/schema.org","@type":"Article","name":"Trie","url":"https:\/\/en.wikipedia.org\/wiki\/Trie","sameAs":"http:\/\/www.wikidata.org\/entity\/Q387015","mainEntity":"http:\/\/www.wikidata.org\/entity\/Q387015","author":{"@type":"Organization","name":"Contributors to Wikimedia projects"},"publisher":{"@type":"Organization","name":"Wikimedia Foundation, Inc.","logo":{"@type":"ImageObject","url":"https:\/\/www.wikimedia.org\/static\/images\/wmf-hor-googpub.png"}},"datePublished":"2001-12-10T01:35:44Z","dateModified":"2021-08-10T17:33:33Z","image":"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/b\/be\/Trie_example.svg","headline":"in computer science: ordered tree data structure used to store a dynamic set or associative array where the keys are usually strings"}</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgBackendResponseTime":138,"wgHostname":"mw1415"});});</script>
</body></html>